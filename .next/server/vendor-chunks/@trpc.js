"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc";
exports.ids = ["vendor-chunks/@trpc"];
exports.modules = {

/***/ "(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCClientError)\n/* harmony export */ });\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n\nfunction isTRPCClientError(cause) {\n    return cause instanceof TRPCClientError || /**\n     * @deprecated\n     * Delete in next major\n     */ cause instanceof Error && cause.name === \"TRPCClientError\";\n}\nfunction isTRPCErrorResponse(obj) {\n    return (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(obj) && (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(obj.error) && typeof obj.error.code === \"number\" && typeof obj.error.message === \"string\";\n}\nclass TRPCClientError extends Error {\n    static from(_cause, opts = {}) {\n        const cause = _cause;\n        if (isTRPCClientError(cause)) {\n            if (opts.meta) {\n                // Decorate with meta error data\n                cause.meta = {\n                    ...cause.meta,\n                    ...opts.meta\n                };\n            }\n            return cause;\n        }\n        if (isTRPCErrorResponse(cause)) {\n            return new TRPCClientError(cause.error.message, {\n                ...opts,\n                result: cause\n            });\n        }\n        if (!(cause instanceof Error)) {\n            return new TRPCClientError(\"Unknown error\", {\n                ...opts,\n                cause: cause\n            });\n        }\n        return new TRPCClientError(cause.message, {\n            ...opts,\n            cause\n        });\n    }\n    constructor(message, opts){\n        const cause = opts?.cause;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.meta = opts?.meta;\n        this.cause = cause;\n        this.shape = opts?.result?.error;\n        this.data = opts?.result?.error.data;\n        this.name = \"TRPCClientError\";\n        Object.setPrototypeOf(this, TRPCClientError.prototype);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3QvVFJQQ0NsaWVudEVycm9yLTBkZTRkMjMxLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErRDtBQUUvRCxTQUFTRSxrQkFBa0JDLEtBQUs7SUFDNUIsT0FBT0EsaUJBQWlCQyxtQkFBbUI7OztLQUcxQyxHQUFHRCxpQkFBaUJFLFNBQVNGLE1BQU1HLElBQUksS0FBSztBQUNqRDtBQUNBLFNBQVNDLG9CQUFvQkMsR0FBRztJQUM1QixPQUFPUCxnRUFBUUEsQ0FBQ08sUUFBUVAsZ0VBQVFBLENBQUNPLElBQUlDLEtBQUssS0FBSyxPQUFPRCxJQUFJQyxLQUFLLENBQUNDLElBQUksS0FBSyxZQUFZLE9BQU9GLElBQUlDLEtBQUssQ0FBQ0UsT0FBTyxLQUFLO0FBQ3RIO0FBQ0EsTUFBTVAsd0JBQXdCQztJQUMxQixPQUFPTyxLQUFLQyxNQUFNLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLEVBQUU7UUFDM0IsTUFBTVgsUUFBUVU7UUFDZCxJQUFJWCxrQkFBa0JDLFFBQVE7WUFDMUIsSUFBSVcsS0FBS0MsSUFBSSxFQUFFO2dCQUNYLGdDQUFnQztnQkFDaENaLE1BQU1ZLElBQUksR0FBRztvQkFDVCxHQUFHWixNQUFNWSxJQUFJO29CQUNiLEdBQUdELEtBQUtDLElBQUk7Z0JBQ2hCO1lBQ0o7WUFDQSxPQUFPWjtRQUNYO1FBQ0EsSUFBSUksb0JBQW9CSixRQUFRO1lBQzVCLE9BQU8sSUFBSUMsZ0JBQWdCRCxNQUFNTSxLQUFLLENBQUNFLE9BQU8sRUFBRTtnQkFDNUMsR0FBR0csSUFBSTtnQkFDUEUsUUFBUWI7WUFDWjtRQUNKO1FBQ0EsSUFBSSxDQUFFQSxDQUFBQSxpQkFBaUJFLEtBQUksR0FBSTtZQUMzQixPQUFPLElBQUlELGdCQUFnQixpQkFBaUI7Z0JBQ3hDLEdBQUdVLElBQUk7Z0JBQ1BYLE9BQU9BO1lBQ1g7UUFDSjtRQUNBLE9BQU8sSUFBSUMsZ0JBQWdCRCxNQUFNUSxPQUFPLEVBQUU7WUFDdEMsR0FBR0csSUFBSTtZQUNQWDtRQUNKO0lBQ0o7SUFDQWMsWUFBWU4sT0FBTyxFQUFFRyxJQUFJLENBQUM7UUFDdEIsTUFBTVgsUUFBUVcsTUFBTVg7UUFDcEIsNkRBQTZEO1FBQzdELDBEQUEwRDtRQUMxRCxLQUFLLENBQUNRLFNBQVM7WUFDWFI7UUFDSjtRQUNBLElBQUksQ0FBQ1ksSUFBSSxHQUFHRCxNQUFNQztRQUNsQixJQUFJLENBQUNaLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNlLEtBQUssR0FBR0osTUFBTUUsUUFBUVA7UUFDM0IsSUFBSSxDQUFDVSxJQUFJLEdBQUdMLE1BQU1FLFFBQVFQLE1BQU1VO1FBQ2hDLElBQUksQ0FBQ2IsSUFBSSxHQUFHO1FBQ1pjLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUVqQixnQkFBZ0JrQixTQUFTO0lBQ3pEO0FBQ0o7QUFFZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L1RSUENDbGllbnRFcnJvci0wZGU0ZDIzMS5tanM/NzE5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpIGFzIGlzT2JqZWN0IH0gZnJvbSAnLi90cmFuc2Zvcm1SZXN1bHQtYWNlODY0YjgubWpzJztcblxuZnVuY3Rpb24gaXNUUlBDQ2xpZW50RXJyb3IoY2F1c2UpIHtcbiAgICByZXR1cm4gY2F1c2UgaW5zdGFuY2VvZiBUUlBDQ2xpZW50RXJyb3IgfHwgLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBEZWxldGUgaW4gbmV4dCBtYWpvclxuICAgICAqLyBjYXVzZSBpbnN0YW5jZW9mIEVycm9yICYmIGNhdXNlLm5hbWUgPT09ICdUUlBDQ2xpZW50RXJyb3InO1xufVxuZnVuY3Rpb24gaXNUUlBDRXJyb3JSZXNwb25zZShvYmopIHtcbiAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBpc09iamVjdChvYmouZXJyb3IpICYmIHR5cGVvZiBvYmouZXJyb3IuY29kZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iai5lcnJvci5tZXNzYWdlID09PSAnc3RyaW5nJztcbn1cbmNsYXNzIFRSUENDbGllbnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBzdGF0aWMgZnJvbShfY2F1c2UsIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCBjYXVzZSA9IF9jYXVzZTtcbiAgICAgICAgaWYgKGlzVFJQQ0NsaWVudEVycm9yKGNhdXNlKSkge1xuICAgICAgICAgICAgaWYgKG9wdHMubWV0YSkge1xuICAgICAgICAgICAgICAgIC8vIERlY29yYXRlIHdpdGggbWV0YSBlcnJvciBkYXRhXG4gICAgICAgICAgICAgICAgY2F1c2UubWV0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY2F1c2UubWV0YSxcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0cy5tZXRhXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYXVzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUUlBDRXJyb3JSZXNwb25zZShjYXVzZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVFJQQ0NsaWVudEVycm9yKGNhdXNlLmVycm9yLm1lc3NhZ2UsIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogY2F1c2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGNhdXNlIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRSUENDbGllbnRFcnJvcignVW5rbm93biBlcnJvcicsIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgIGNhdXNlOiBjYXVzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBUUlBDQ2xpZW50RXJyb3IoY2F1c2UubWVzc2FnZSwge1xuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgIGNhdXNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRzKXtcbiAgICAgICAgY29uc3QgY2F1c2UgPSBvcHRzPy5jYXVzZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAvLyBAdHMtaWdub3JlIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWVycm9yLWNhdXNlXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHtcbiAgICAgICAgICAgIGNhdXNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1ldGEgPSBvcHRzPy5tZXRhO1xuICAgICAgICB0aGlzLmNhdXNlID0gY2F1c2U7XG4gICAgICAgIHRoaXMuc2hhcGUgPSBvcHRzPy5yZXN1bHQ/LmVycm9yO1xuICAgICAgICB0aGlzLmRhdGEgPSBvcHRzPy5yZXN1bHQ/LmVycm9yLmRhdGE7XG4gICAgICAgIHRoaXMubmFtZSA9ICdUUlBDQ2xpZW50RXJyb3InO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVFJQQ0NsaWVudEVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBUUlBDQ2xpZW50RXJyb3IgYXMgVCB9O1xuIl0sIm5hbWVzIjpbImkiLCJpc09iamVjdCIsImlzVFJQQ0NsaWVudEVycm9yIiwiY2F1c2UiLCJUUlBDQ2xpZW50RXJyb3IiLCJFcnJvciIsIm5hbWUiLCJpc1RSUENFcnJvclJlc3BvbnNlIiwib2JqIiwiZXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsImZyb20iLCJfY2F1c2UiLCJvcHRzIiwibWV0YSIsInJlc3VsdCIsImNvbnN0cnVjdG9yIiwic2hhcGUiLCJkYXRhIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/httpBatchLink-204206a5.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@trpc/client/dist/httpBatchLink-204206a5.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createHTTPBatchLink),\n/* harmony export */   h: () => (/* binding */ httpBatchLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-0de4d231.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n/* harmony import */ var _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpUtils-f58ceda1.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs\");\n\n\n\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */ /**\n * A function that should never be called unless we messed something up.\n */ const throwFatalError = ()=>{\n    throw new Error(\"Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new\");\n};\n/**\n * Dataloader that's very inspired by https://github.com/graphql/dataloader\n * Less configuration, no caching, and allows you to cancel requests\n * When cancelling a single fetch the whole batch will be cancelled only when _all_ items are cancelled\n */ function dataLoader(batchLoader) {\n    let pendingItems = null;\n    let dispatchTimer = null;\n    const destroyTimerAndPendingItems = ()=>{\n        clearTimeout(dispatchTimer);\n        dispatchTimer = null;\n        pendingItems = null;\n    };\n    /**\n   * Iterate through the items and split them into groups based on the `batchLoader`'s validate function\n   */ function groupItems(items) {\n        const groupedItems = [\n            []\n        ];\n        let index = 0;\n        while(true){\n            const item = items[index];\n            if (!item) {\n                break;\n            }\n            const lastGroup = groupedItems[groupedItems.length - 1];\n            if (item.aborted) {\n                // Item was aborted before it was dispatched\n                item.reject?.(new Error(\"Aborted\"));\n                index++;\n                continue;\n            }\n            const isValid = batchLoader.validate(lastGroup.concat(item).map((it)=>it.key));\n            if (isValid) {\n                lastGroup.push(item);\n                index++;\n                continue;\n            }\n            if (lastGroup.length === 0) {\n                item.reject?.(new Error(\"Input is too big for a single dispatch\"));\n                index++;\n                continue;\n            }\n            // Create new group, next iteration will try to add the item to that\n            groupedItems.push([]);\n        }\n        return groupedItems;\n    }\n    function dispatch() {\n        const groupedItems = groupItems(pendingItems);\n        destroyTimerAndPendingItems();\n        // Create batches for each group of items\n        for (const items of groupedItems){\n            if (!items.length) {\n                continue;\n            }\n            const batch = {\n                items,\n                cancel: throwFatalError\n            };\n            for (const item of items){\n                item.batch = batch;\n            }\n            const unitResolver = (index, value)=>{\n                const item = batch.items[index];\n                item.resolve?.(value);\n                item.batch = null;\n                item.reject = null;\n                item.resolve = null;\n            };\n            const { promise, cancel } = batchLoader.fetch(batch.items.map((_item)=>_item.key), unitResolver);\n            batch.cancel = cancel;\n            promise.then((result)=>{\n                for(let i = 0; i < result.length; i++){\n                    const value = result[i];\n                    unitResolver(i, value);\n                }\n                for (const item of batch.items){\n                    item.reject?.(new Error(\"Missing result\"));\n                    item.batch = null;\n                }\n            }).catch((cause)=>{\n                for (const item of batch.items){\n                    item.reject?.(cause);\n                    item.batch = null;\n                }\n            });\n        }\n    }\n    function load(key) {\n        const item = {\n            aborted: false,\n            key,\n            batch: null,\n            resolve: throwFatalError,\n            reject: throwFatalError\n        };\n        const promise = new Promise((resolve, reject)=>{\n            item.reject = reject;\n            item.resolve = resolve;\n            if (!pendingItems) {\n                pendingItems = [];\n            }\n            pendingItems.push(item);\n        });\n        if (!dispatchTimer) {\n            dispatchTimer = setTimeout(dispatch);\n        }\n        const cancel = ()=>{\n            item.aborted = true;\n            if (item.batch?.items.every((item)=>item.aborted)) {\n                // All items in the batch have been cancelled\n                item.batch.cancel();\n                item.batch = null;\n            }\n        };\n        return {\n            promise,\n            cancel\n        };\n    }\n    return {\n        load\n    };\n}\n/**\n * @internal\n */ function createHTTPBatchLink(requester) {\n    return function httpBatchLink(opts) {\n        const resolvedOpts = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        const maxURLLength = opts.maxURLLength ?? Infinity;\n        // initialized config\n        return (runtime)=>{\n            const batchLoader = (type)=>{\n                const validate = (batchOps)=>{\n                    if (maxURLLength === Infinity) {\n                        // escape hatch for quick calcs\n                        return true;\n                    }\n                    const path = batchOps.map((op)=>op.path).join(\",\");\n                    const inputs = batchOps.map((op)=>op.input);\n                    const url = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.g)({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        inputs\n                    });\n                    return url.length <= maxURLLength;\n                };\n                const fetch = requester({\n                    ...resolvedOpts,\n                    runtime,\n                    type,\n                    opts\n                });\n                return {\n                    validate,\n                    fetch\n                };\n            };\n            const query = dataLoader(batchLoader(\"query\"));\n            const mutation = dataLoader(batchLoader(\"mutation\"));\n            const subscription = dataLoader(batchLoader(\"subscription\"));\n            const loaders = {\n                query,\n                subscription,\n                mutation\n            };\n            return ({ op })=>{\n                return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const loader = loaders[op.type];\n                    const { promise, cancel } = loader.load(op);\n                    let _res = undefined;\n                    promise.then((res)=>{\n                        _res = res;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta: res.meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((err)=>{\n                        observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err, {\n                            meta: _res?.meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n            };\n        };\n    };\n}\nconst batchRequester = (requesterOpts)=>{\n    return (batchOps)=>{\n        const path = batchOps.map((op)=>op.path).join(\",\");\n        const inputs = batchOps.map((op)=>op.input);\n        const { promise, cancel } = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.j)({\n            ...requesterOpts,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === \"function\") {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        });\n        return {\n            promise: promise.then((res)=>{\n                const resJSON = Array.isArray(res.json) ? res.json : batchOps.map(()=>res.json);\n                const result = resJSON.map((item)=>({\n                        meta: res.meta,\n                        json: item\n                    }));\n                return result;\n            }),\n            cancel\n        };\n    };\n};\nconst httpBatchLink = createHTTPBatchLink(batchRequester);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/httpBatchLink-204206a5.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBody),\n/* harmony export */   b: () => (/* binding */ getFetch),\n/* harmony export */   f: () => (/* binding */ fetchHTTPResponse),\n/* harmony export */   g: () => (/* binding */ getUrl),\n/* harmony export */   h: () => (/* binding */ httpRequest),\n/* harmony export */   j: () => (/* binding */ jsonHttpRequester),\n/* harmony export */   r: () => (/* binding */ resolveHTTPLinkOptions)\n/* harmony export */ });\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCClientError-0de4d231.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n\nconst isFunction = (fn)=>typeof fn === \"function\";\nfunction getFetch(customFetchImpl) {\n    if (customFetchImpl) {\n        return customFetchImpl;\n    }\n    if (false) {}\n    if (typeof globalThis !== \"undefined\" && isFunction(globalThis.fetch)) {\n        return globalThis.fetch;\n    }\n    throw new Error(\"No fetch implementation found\");\n}\nfunction getAbortController(customAbortControllerImpl) {\n    if (customAbortControllerImpl) {\n        return customAbortControllerImpl;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (false) {}\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== \"undefined\" && globalThis.AbortController) {\n        return globalThis.AbortController;\n    }\n    return null;\n}\nfunction resolveHTTPLinkOptions(opts) {\n    return {\n        url: opts.url.toString().replace(/\\/$/, \"\"),\n        fetch: opts.fetch,\n        AbortController: getAbortController(opts.AbortController)\n    };\n}\n// https://github.com/trpc/trpc/pull/669\nfunction arrayToDict(array) {\n    const dict = {};\n    for(let index = 0; index < array.length; index++){\n        const element = array[index];\n        dict[index] = element;\n    }\n    return dict;\n}\nconst METHOD = {\n    query: \"GET\",\n    mutation: \"POST\"\n};\nfunction getInput(opts) {\n    return \"input\" in opts ? opts.runtime.transformer.serialize(opts.input) : arrayToDict(opts.inputs.map((_input)=>opts.runtime.transformer.serialize(_input)));\n}\nconst getUrl = (opts)=>{\n    let url = opts.url + \"/\" + opts.path;\n    const queryParts = [];\n    if (\"inputs\" in opts) {\n        queryParts.push(\"batch=1\");\n    }\n    if (opts.type === \"query\") {\n        const input = getInput(opts);\n        if (input !== undefined) {\n            queryParts.push(`input=${encodeURIComponent(JSON.stringify(input))}`);\n        }\n    }\n    if (queryParts.length) {\n        url += \"?\" + queryParts.join(\"&\");\n    }\n    return url;\n};\nconst getBody = (opts)=>{\n    if (opts.type === \"query\") {\n        return undefined;\n    }\n    const input = getInput(opts);\n    return input !== undefined ? JSON.stringify(input) : undefined;\n};\nconst jsonHttpRequester = (opts)=>{\n    return httpRequest({\n        ...opts,\n        contentTypeHeader: \"application/json\",\n        getUrl,\n        getBody\n    });\n};\nasync function fetchHTTPResponse(opts, ac) {\n    const url = opts.getUrl(opts);\n    const body = opts.getBody(opts);\n    const { type } = opts;\n    const resolvedHeaders = await opts.headers();\n    /* istanbul ignore if -- @preserve */ if (type === \"subscription\") {\n        throw new Error(\"Subscriptions should use wsLink\");\n    }\n    const headers = {\n        ...opts.contentTypeHeader ? {\n            \"content-type\": opts.contentTypeHeader\n        } : {},\n        ...opts.batchModeHeader ? {\n            \"trpc-batch-mode\": opts.batchModeHeader\n        } : {},\n        ...resolvedHeaders\n    };\n    return getFetch(opts.fetch)(url, {\n        method: METHOD[type],\n        signal: ac?.signal,\n        body: body,\n        headers\n    });\n}\nfunction httpRequest(opts) {\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const meta = {};\n    let done = false;\n    const promise = new Promise((resolve, reject)=>{\n        fetchHTTPResponse(opts, ac).then((_res)=>{\n            meta.response = _res;\n            done = true;\n            return _res.json();\n        }).then((json)=>{\n            meta.responseJSON = json;\n            resolve({\n                json: json,\n                meta\n            });\n        }).catch((err)=>{\n            done = true;\n            reject(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_0__.T.from(err, {\n                meta\n            }));\n        });\n    });\n    const cancel = ()=>{\n        if (!done) {\n            ac?.abort();\n        }\n    };\n    return {\n        promise,\n        cancel\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@trpc/client/dist/index.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T),\n/* harmony export */   TRPCUntypedClient: () => (/* binding */ TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* binding */ clientCallTypeToProcedureType),\n/* harmony export */   createTRPCClient: () => (/* binding */ createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* binding */ createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* binding */ createTRPCProxyClient),\n/* harmony export */   createTRPCUntypedClient: () => (/* binding */ createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.createWSClient),\n/* harmony export */   experimental_formDataLink: () => (/* binding */ experimental_formDataLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.b),\n/* harmony export */   getUntypedClient: () => (/* binding */ getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _httpBatchLink_204206a5_mjs__WEBPACK_IMPORTED_MODULE_5__.h),\n/* harmony export */   httpLink: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLink),\n/* harmony export */   httpLinkFactory: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__.loggerLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.s),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* binding */ unstable_httpBatchStreamLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitLink-4c75f7be.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\");\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-0de4d231.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/./node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./httpUtils-f58ceda1.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs\");\n/* harmony import */ var _httpBatchLink_204206a5_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./httpBatchLink-204206a5.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/httpBatchLink-204206a5.mjs\");\n/* harmony import */ var _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./links/httpLink.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/links/httpLink.mjs\");\n/* harmony import */ var _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./links/loggerLink.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/links/loggerLink.mjs\");\n/* harmony import */ var _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./links/wsLink.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/links/wsLink.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass TRPCUntypedClient {\n    $request({ type, input, path, context = {} }) {\n        const chain$ = (0,_splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.c)({\n            links: this.links,\n            op: {\n                id: ++this.requestId,\n                type,\n                path,\n                input,\n                context\n            }\n        });\n        return chain$.pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.share)());\n    }\n    requestAsPromise(opts) {\n        const req$ = this.$request(opts);\n        const { promise, abort } = (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observableToPromise)(req$);\n        const abortablePromise = new Promise((resolve, reject)=>{\n            opts.signal?.addEventListener(\"abort\", abort);\n            promise.then((envelope)=>{\n                resolve(envelope.result.data);\n            }).catch((err)=>{\n                reject(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err));\n            });\n        });\n        return abortablePromise;\n    }\n    query(path, input, opts) {\n        return this.requestAsPromise({\n            type: \"query\",\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    mutation(path, input, opts) {\n        return this.requestAsPromise({\n            type: \"mutation\",\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    subscription(path, input, opts) {\n        const observable$ = this.$request({\n            type: \"subscription\",\n            path,\n            input,\n            context: opts?.context\n        });\n        return observable$.subscribe({\n            next (envelope) {\n                if (envelope.result.type === \"started\") {\n                    opts.onStarted?.();\n                } else if (envelope.result.type === \"stopped\") {\n                    opts.onStopped?.();\n                } else {\n                    opts.onData?.(envelope.result.data);\n                }\n            },\n            error (err) {\n                opts.onError?.(err);\n            },\n            complete () {\n                opts.onComplete?.();\n            }\n        });\n    }\n    constructor(opts){\n        this.requestId = 0;\n        const combinedTransformer = (()=>{\n            const transformer = opts.transformer;\n            if (!transformer) {\n                return {\n                    input: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    },\n                    output: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    }\n                };\n            }\n            if (\"input\" in transformer) {\n                return opts.transformer;\n            }\n            return {\n                input: transformer,\n                output: transformer\n            };\n        })();\n        this.runtime = {\n            transformer: {\n                serialize: (data)=>combinedTransformer.input.serialize(data),\n                deserialize: (data)=>combinedTransformer.output.deserialize(data)\n            },\n            combinedTransformer\n        };\n        // Initialize the links\n        this.links = opts.links.map((link)=>link(this.runtime));\n    }\n}\nfunction createTRPCUntypedClient(opts) {\n    return new TRPCUntypedClient(opts);\n}\n/**\n * @deprecated use `createTRPCProxyClient` instead\n */ function createTRPCClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    return client;\n}\nconst clientCallTypeMap = {\n    query: \"query\",\n    mutate: \"mutation\",\n    subscribe: \"subscription\"\n};\n/** @internal */ const clientCallTypeToProcedureType = (clientCallType)=>{\n    return clientCallTypeMap[clientCallType];\n};\n/**\n * @deprecated use `createTRPCProxyClient` instead\n * @internal\n */ function createTRPCClientProxy(client) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createFlatProxy)((key)=>{\n        if (client.hasOwnProperty(key)) {\n            return client[key];\n        }\n        if (key === \"__untypedClient\") {\n            return client;\n        }\n        return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createRecursiveProxy)(({ path, args })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const procedureType = clientCallTypeToProcedureType(pathCopy.pop());\n            const fullPath = pathCopy.join(\".\");\n            return client[procedureType](fullPath, ...args);\n        });\n    });\n}\nfunction createTRPCProxyClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    const proxy = createTRPCClientProxy(client);\n    return proxy;\n}\n/**\n * Get an untyped client from a proxy client\n * @internal\n */ function getUntypedClient(client) {\n    return client.__untypedClient;\n}\nfunction getTextDecoder(customTextDecoder) {\n    if (customTextDecoder) {\n        return customTextDecoder;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (false) {}\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== \"undefined\" && globalThis.TextDecoder) {\n        return new globalThis.TextDecoder();\n    }\n    throw new Error(\"No TextDecoder implementation found\");\n}\n// Stream parsing adapted from https://www.loginradius.com/blog/engineering/guest-post/http-streaming-with-nodejs-and-fetch-api/\n/**\n * @internal\n * @description Take a stream of bytes and call `onLine` with\n * a JSON object for each line in the stream. Expected stream\n * format is:\n * ```json\n * {\"1\": {...}\n * ,\"0\": {...}\n * }\n * ```\n */ async function parseJSONStream(opts) {\n    const parse = opts.parse ?? JSON.parse;\n    const onLine = (line)=>{\n        if (opts.signal?.aborted) return;\n        if (!line || line === \"}\") {\n            return;\n        }\n        /**\n     * At this point, `line` can be one of two things:\n     * - The first line of the stream `{\"2\":{...}`\n     * - A line in the middle of the stream `,\"2\":{...}`\n     */ const indexOfColon = line.indexOf(\":\");\n        const indexAsStr = line.substring(2, indexOfColon - 1);\n        const text = line.substring(indexOfColon + 1);\n        opts.onSingle(Number(indexAsStr), parse(text));\n    };\n    await readLines(opts.readableStream, onLine, opts.textDecoder);\n}\n/**\n * Handle transforming a stream of bytes into lines of text.\n * To avoid using AsyncIterators / AsyncGenerators,\n * we use a callback for each line.\n *\n * @param readableStream can be a NodeJS stream or a WebAPI stream\n * @param onLine will be called for every line ('\\n' delimited) in the stream\n */ async function readLines(readableStream, onLine, textDecoder) {\n    let partOfLine = \"\";\n    const onChunk = (chunk)=>{\n        const chunkText = textDecoder.decode(chunk);\n        const chunkLines = chunkText.split(\"\\n\");\n        if (chunkLines.length === 1) {\n            partOfLine += chunkLines[0];\n        } else if (chunkLines.length > 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n            onLine(partOfLine + chunkLines[0]);\n            for(let i = 1; i < chunkLines.length - 1; i++){\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n                onLine(chunkLines[i]);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length doesn't change, so is necessarily > 1\n            partOfLine = chunkLines[chunkLines.length - 1];\n        }\n    };\n    // we handle 2 different types of streams, this if where we figure out which one we have\n    if (\"getReader\" in readableStream) {\n        await readStandardChunks(readableStream, onChunk);\n    } else {\n        await readNodeChunks(readableStream, onChunk);\n    }\n    onLine(partOfLine);\n}\n/**\n * Handle NodeJS stream\n */ function readNodeChunks(stream, onChunk) {\n    return new Promise((resolve)=>{\n        stream.on(\"data\", onChunk);\n        stream.on(\"end\", resolve);\n    });\n}\n/**\n * Handle WebAPI stream\n */ async function readStandardChunks(stream, onChunk) {\n    const reader = stream.getReader();\n    let readResult = await reader.read();\n    while(!readResult.done){\n        onChunk(readResult.value);\n        readResult = await reader.read();\n    }\n}\nconst streamingJsonHttpRequester = (opts, onSingle)=>{\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const responsePromise = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.f)({\n        ...opts,\n        contentTypeHeader: \"application/json\",\n        batchModeHeader: \"stream\",\n        getUrl: _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.g,\n        getBody: _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.a\n    }, ac);\n    const cancel = ()=>ac?.abort();\n    const promise = responsePromise.then(async (res)=>{\n        if (!res.body) throw new Error(\"Received response without body\");\n        const meta = {\n            response: res\n        };\n        return parseJSONStream({\n            readableStream: res.body,\n            onSingle,\n            parse: (string)=>({\n                    json: JSON.parse(string),\n                    meta\n                }),\n            signal: ac?.signal,\n            textDecoder: opts.textDecoder\n        });\n    });\n    return {\n        cancel,\n        promise\n    };\n};\nconst streamRequester = (requesterOpts)=>{\n    const textDecoder = getTextDecoder(requesterOpts.opts.textDecoder);\n    return (batchOps, unitResolver)=>{\n        const path = batchOps.map((op)=>op.path).join(\",\");\n        const inputs = batchOps.map((op)=>op.input);\n        const { cancel, promise } = streamingJsonHttpRequester({\n            ...requesterOpts,\n            textDecoder,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === \"function\") {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        }, (index, res)=>{\n            unitResolver(index, res);\n        });\n        return {\n            /**\n       * return an empty array because the batchLoader expects an array of results\n       * but we've already called the `unitResolver` for each of them, there's\n       * nothing left to do here.\n       */ promise: promise.then(()=>[]),\n            cancel\n        };\n    };\n};\nconst unstable_httpBatchStreamLink = (0,_httpBatchLink_204206a5_mjs__WEBPACK_IMPORTED_MODULE_5__.c)(streamRequester);\nconst getBody = (opts)=>{\n    if (!(\"input\" in opts)) {\n        return undefined;\n    }\n    if (!(opts.input instanceof FormData)) {\n        throw new Error(\"Input is not FormData\");\n    }\n    return opts.input;\n};\nconst formDataRequester = (opts)=>{\n    if (opts.type !== \"mutation\") {\n        // TODO(?) handle formdata queries\n        throw new Error(\"We only handle mutations with formdata\");\n    }\n    return (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.h)({\n        ...opts,\n        getUrl () {\n            return `${opts.url}/${opts.path}`;\n        },\n        getBody\n    });\n};\nconst experimental_formDataLink = (0,_links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory)({\n    requester: formDataRequester\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/links/httpLink.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@trpc/client/dist/links/httpLink.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   httpLink: () => (/* binding */ httpLink),\n/* harmony export */   httpLinkFactory: () => (/* binding */ httpLinkFactory)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-0de4d231.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n/* harmony import */ var _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../httpUtils-f58ceda1.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs\");\n\n\n\n\nfunction httpLinkFactory(factoryOpts) {\n    return (opts)=>{\n        const resolvedOpts = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        return (runtime)=>({ op })=>(0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const { path, input, type } = op;\n                    const { promise, cancel } = factoryOpts.requester({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        input,\n                        headers () {\n                            if (!opts.headers) {\n                                return {};\n                            }\n                            if (typeof opts.headers === \"function\") {\n                                return opts.headers({\n                                    op\n                                });\n                            }\n                            return opts.headers;\n                        }\n                    });\n                    let meta = undefined;\n                    promise.then((res)=>{\n                        meta = res.meta;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((cause)=>{\n                        observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(cause, {\n                            meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n    };\n}\n/**\n * @see https://trpc.io/docs/client/links/httpLink\n */ const httpLink = httpLinkFactory({\n    requester: _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.j\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3QvbGlua3MvaHR0cExpbmsubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxRDtBQUNrQjtBQUNBO0FBQ3lCO0FBRWhHLFNBQVNTLGdCQUFnQkMsV0FBVztJQUNoQyxPQUFPLENBQUNDO1FBQ0osTUFBTUMsZUFBZU4sMERBQXNCQSxDQUFDSztRQUM1QyxPQUFPLENBQUNFLFVBQVUsQ0FBQyxFQUFFQyxFQUFFLEVBQUcsR0FBR2QsbUVBQVVBLENBQUMsQ0FBQ2U7b0JBQzdCLE1BQU0sRUFBRUMsSUFBSSxFQUFHQyxLQUFLLEVBQUdDLElBQUksRUFBRyxHQUFHSjtvQkFDakMsTUFBTSxFQUFFSyxPQUFPLEVBQUdDLE1BQU0sRUFBRyxHQUFHVixZQUFZVyxTQUFTLENBQUM7d0JBQ2hELEdBQUdULFlBQVk7d0JBQ2ZDO3dCQUNBSzt3QkFDQUY7d0JBQ0FDO3dCQUNBSzs0QkFDSSxJQUFJLENBQUNYLEtBQUtXLE9BQU8sRUFBRTtnQ0FDZixPQUFPLENBQUM7NEJBQ1o7NEJBQ0EsSUFBSSxPQUFPWCxLQUFLVyxPQUFPLEtBQUssWUFBWTtnQ0FDcEMsT0FBT1gsS0FBS1csT0FBTyxDQUFDO29DQUNoQlI7Z0NBQ0o7NEJBQ0o7NEJBQ0EsT0FBT0gsS0FBS1csT0FBTzt3QkFDdkI7b0JBQ0o7b0JBQ0EsSUFBSUMsT0FBT0M7b0JBQ1hMLFFBQVFNLElBQUksQ0FBQyxDQUFDQzt3QkFDVkgsT0FBT0csSUFBSUgsSUFBSTt3QkFDZixNQUFNSSxjQUFjekIsZ0VBQWVBLENBQUN3QixJQUFJRSxJQUFJLEVBQUVmO3dCQUM5QyxJQUFJLENBQUNjLFlBQVlFLEVBQUUsRUFBRTs0QkFDakJkLFNBQVNlLEtBQUssQ0FBQzFCLDREQUFlQSxDQUFDMkIsSUFBSSxDQUFDSixZQUFZRyxLQUFLLEVBQUU7Z0NBQ25EUDs0QkFDSjs0QkFDQTt3QkFDSjt3QkFDQVIsU0FBU2lCLElBQUksQ0FBQzs0QkFDVkMsU0FBU1AsSUFBSUgsSUFBSTs0QkFDakJXLFFBQVFQLFlBQVlPLE1BQU07d0JBQzlCO3dCQUNBbkIsU0FBU29CLFFBQVE7b0JBQ3JCLEdBQUdDLEtBQUssQ0FBQyxDQUFDQzt3QkFDTnRCLFNBQVNlLEtBQUssQ0FBQzFCLDREQUFlQSxDQUFDMkIsSUFBSSxDQUFDTSxPQUFPOzRCQUN2Q2Q7d0JBQ0o7b0JBQ0o7b0JBQ0EsT0FBTzt3QkFDSEg7b0JBQ0o7Z0JBQ0o7SUFDWjtBQUNKO0FBQ0E7O0NBRUMsR0FBRyxNQUFNa0IsV0FBVzdCLGdCQUFnQjtJQUNqQ1ksV0FBV2Isc0RBQWlCQTtBQUNoQztBQUVxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3QvbGlua3MvaHR0cExpbmsubWpzPzY1MDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb2JzZXJ2YWJsZSB9IGZyb20gJ0B0cnBjL3NlcnZlci9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHQgYXMgdHJhbnNmb3JtUmVzdWx0IH0gZnJvbSAnLi4vdHJhbnNmb3JtUmVzdWx0LWFjZTg2NGI4Lm1qcyc7XG5pbXBvcnQgeyBUIGFzIFRSUENDbGllbnRFcnJvciB9IGZyb20gJy4uL1RSUENDbGllbnRFcnJvci0wZGU0ZDIzMS5tanMnO1xuaW1wb3J0IHsgciBhcyByZXNvbHZlSFRUUExpbmtPcHRpb25zLCBqIGFzIGpzb25IdHRwUmVxdWVzdGVyIH0gZnJvbSAnLi4vaHR0cFV0aWxzLWY1OGNlZGExLm1qcyc7XG5cbmZ1bmN0aW9uIGh0dHBMaW5rRmFjdG9yeShmYWN0b3J5T3B0cykge1xuICAgIHJldHVybiAob3B0cyk9PntcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRPcHRzID0gcmVzb2x2ZUhUVFBMaW5rT3B0aW9ucyhvcHRzKTtcbiAgICAgICAgcmV0dXJuIChydW50aW1lKT0+KHsgb3AgIH0pPT5vYnNlcnZhYmxlKChvYnNlcnZlcik9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBwYXRoICwgaW5wdXQgLCB0eXBlICB9ID0gb3A7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcHJvbWlzZSAsIGNhbmNlbCAgfSA9IGZhY3RvcnlPcHRzLnJlcXVlc3Rlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5yZXNvbHZlZE9wdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0cy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmhlYWRlcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaGVhZGVycyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaGVhZGVycztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtZXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oKHJlcyk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGEgPSByZXMubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtUmVzdWx0KHJlcy5qc29uLCBydW50aW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHJhbnNmb3JtZWQub2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihUUlBDQ2xpZW50RXJyb3IuZnJvbSh0cmFuc2Zvcm1lZC5lcnJvciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHJlcy5tZXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogdHJhbnNmb3JtZWQucmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChjYXVzZSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKFRSUENDbGllbnRFcnJvci5mcm9tKGNhdXNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICB9O1xufVxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vdHJwYy5pby9kb2NzL2NsaWVudC9saW5rcy9odHRwTGlua1xuICovIGNvbnN0IGh0dHBMaW5rID0gaHR0cExpbmtGYWN0b3J5KHtcbiAgICByZXF1ZXN0ZXI6IGpzb25IdHRwUmVxdWVzdGVyXG59KTtcblxuZXhwb3J0IHsgaHR0cExpbmssIGh0dHBMaW5rRmFjdG9yeSB9O1xuIl0sIm5hbWVzIjpbIm9ic2VydmFibGUiLCJ0IiwidHJhbnNmb3JtUmVzdWx0IiwiVCIsIlRSUENDbGllbnRFcnJvciIsInIiLCJyZXNvbHZlSFRUUExpbmtPcHRpb25zIiwiaiIsImpzb25IdHRwUmVxdWVzdGVyIiwiaHR0cExpbmtGYWN0b3J5IiwiZmFjdG9yeU9wdHMiLCJvcHRzIiwicmVzb2x2ZWRPcHRzIiwicnVudGltZSIsIm9wIiwib2JzZXJ2ZXIiLCJwYXRoIiwiaW5wdXQiLCJ0eXBlIiwicHJvbWlzZSIsImNhbmNlbCIsInJlcXVlc3RlciIsImhlYWRlcnMiLCJtZXRhIiwidW5kZWZpbmVkIiwidGhlbiIsInJlcyIsInRyYW5zZm9ybWVkIiwianNvbiIsIm9rIiwiZXJyb3IiLCJmcm9tIiwibmV4dCIsImNvbnRleHQiLCJyZXN1bHQiLCJjb21wbGV0ZSIsImNhdGNoIiwiY2F1c2UiLCJodHRwTGluayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/links/httpLink.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/links/loggerLink.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@trpc/client/dist/links/loggerLink.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loggerLink: () => (/* binding */ loggerLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\");\n\n/// <reference lib=\"dom.iterable\" />\nfunction isFormData(value) {\n    if (typeof FormData === \"undefined\") {\n        // FormData is not supported\n        return false;\n    }\n    return value instanceof FormData;\n}\nconst palettes = {\n    css: {\n        query: [\n            \"72e3ff\",\n            \"3fb0d8\"\n        ],\n        mutation: [\n            \"c5a3fc\",\n            \"904dfc\"\n        ],\n        subscription: [\n            \"ff49e1\",\n            \"d83fbe\"\n        ]\n    },\n    ansi: {\n        regular: {\n            // Cyan background, black and white text respectively\n            query: [\n                \"\\x1b[30;46m\",\n                \"\\x1b[97;46m\"\n            ],\n            // Magenta background, black and white text respectively\n            mutation: [\n                \"\\x1b[30;45m\",\n                \"\\x1b[97;45m\"\n            ],\n            // Green background, black and white text respectively\n            subscription: [\n                \"\\x1b[30;42m\",\n                \"\\x1b[97;42m\"\n            ]\n        },\n        bold: {\n            query: [\n                \"\\x1b[1;30;46m\",\n                \"\\x1b[1;97;46m\"\n            ],\n            mutation: [\n                \"\\x1b[1;30;45m\",\n                \"\\x1b[1;97;45m\"\n            ],\n            subscription: [\n                \"\\x1b[1;30;42m\",\n                \"\\x1b[1;97;42m\"\n            ]\n        }\n    }\n};\nfunction constructPartsAndArgs(opts) {\n    const { direction, type, path, id, input } = opts;\n    const parts = [];\n    const args = [];\n    if (opts.colorMode === \"ansi\") {\n        const [lightRegular, darkRegular] = palettes.ansi.regular[type];\n        const [lightBold, darkBold] = palettes.ansi.bold[type];\n        const reset = \"\\x1b[0m\";\n        parts.push(direction === \"up\" ? lightRegular : darkRegular, direction === \"up\" ? \">>\" : \"<<\", type, direction === \"up\" ? lightBold : darkBold, `#${id}`, path, reset);\n        if (direction === \"up\") {\n            args.push({\n                input: opts.input\n            });\n        } else {\n            args.push({\n                input: opts.input,\n                // strip context from result cause it's too noisy in terminal wihtout collapse mode\n                result: \"result\" in opts.result ? opts.result.result : opts.result,\n                elapsedMs: opts.elapsedMs\n            });\n        }\n        return {\n            parts,\n            args\n        };\n    }\n    const [light, dark] = palettes.css[type];\n    const css = `\n    background-color: #${direction === \"up\" ? light : dark}; \n    color: ${direction === \"up\" ? \"black\" : \"white\"};\n    padding: 2px;\n  `;\n    parts.push(\"%c\", direction === \"up\" ? \">>\" : \"<<\", type, `#${id}`, `%c${path}%c`, \"%O\");\n    args.push(css, `${css}; font-weight: bold;`, `${css}; font-weight: normal;`);\n    if (direction === \"up\") {\n        args.push({\n            input,\n            context: opts.context\n        });\n    } else {\n        args.push({\n            input,\n            result: opts.result,\n            elapsedMs: opts.elapsedMs,\n            context: opts.context\n        });\n    }\n    return {\n        parts,\n        args\n    };\n}\n// maybe this should be moved to it's own package\nconst defaultLogger = ({ c = console, colorMode = \"css\" })=>(props)=>{\n        const rawInput = props.input;\n        const input = isFormData(rawInput) ? Object.fromEntries(rawInput) : rawInput;\n        const { parts, args } = constructPartsAndArgs({\n            ...props,\n            colorMode,\n            input\n        });\n        const fn = props.direction === \"down\" && props.result && (props.result instanceof Error || \"error\" in props.result.result) ? \"error\" : \"log\";\n        c[fn].apply(null, [\n            parts.join(\" \")\n        ].concat(args));\n    };\n/**\n * @see https://trpc.io/docs/client/links/loggerLink\n */ function loggerLink(opts = {}) {\n    const { enabled = ()=>true } = opts;\n    const colorMode = opts.colorMode ?? ( true ? \"ansi\" : 0);\n    const { logger = defaultLogger({\n        c: opts.console,\n        colorMode\n    }) } = opts;\n    return ()=>{\n        return ({ op, next })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                // ->\n                enabled({\n                    ...op,\n                    direction: \"up\"\n                }) && logger({\n                    ...op,\n                    direction: \"up\"\n                });\n                const requestStartTime = Date.now();\n                function logResult(result) {\n                    const elapsedMs = Date.now() - requestStartTime;\n                    enabled({\n                        ...op,\n                        direction: \"down\",\n                        result\n                    }) && logger({\n                        ...op,\n                        direction: \"down\",\n                        elapsedMs,\n                        result\n                    });\n                }\n                return next(op).pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.tap)({\n                    next (result) {\n                        logResult(result);\n                    },\n                    error (result) {\n                        logResult(result);\n                    }\n                })).subscribe(observer);\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3QvbGlua3MvbG9nZ2VyTGluay5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEQ7QUFFMUQsb0NBQW9DO0FBQ3BDLFNBQVNFLFdBQVdDLEtBQUs7SUFDckIsSUFBSSxPQUFPQyxhQUFhLGFBQWE7UUFDakMsNEJBQTRCO1FBQzVCLE9BQU87SUFDWDtJQUNBLE9BQU9ELGlCQUFpQkM7QUFDNUI7QUFDQSxNQUFNQyxXQUFXO0lBQ2JDLEtBQUs7UUFDREMsT0FBTztZQUNIO1lBQ0E7U0FDSDtRQUNEQyxVQUFVO1lBQ047WUFDQTtTQUNIO1FBQ0RDLGNBQWM7WUFDVjtZQUNBO1NBQ0g7SUFDTDtJQUNBQyxNQUFNO1FBQ0ZDLFNBQVM7WUFDTCxxREFBcUQ7WUFDckRKLE9BQU87Z0JBQ0g7Z0JBQ0E7YUFDSDtZQUNELHdEQUF3RDtZQUN4REMsVUFBVTtnQkFDTjtnQkFDQTthQUNIO1lBQ0Qsc0RBQXNEO1lBQ3REQyxjQUFjO2dCQUNWO2dCQUNBO2FBQ0g7UUFDTDtRQUNBRyxNQUFNO1lBQ0ZMLE9BQU87Z0JBQ0g7Z0JBQ0E7YUFDSDtZQUNEQyxVQUFVO2dCQUNOO2dCQUNBO2FBQ0g7WUFDREMsY0FBYztnQkFDVjtnQkFDQTthQUNIO1FBQ0w7SUFDSjtBQUNKO0FBQ0EsU0FBU0ksc0JBQXNCQyxJQUFJO0lBQy9CLE1BQU0sRUFBRUMsU0FBUyxFQUFHQyxJQUFJLEVBQUdDLElBQUksRUFBR0MsRUFBRSxFQUFHQyxLQUFLLEVBQUcsR0FBR0w7SUFDbEQsTUFBTU0sUUFBUSxFQUFFO0lBQ2hCLE1BQU1DLE9BQU8sRUFBRTtJQUNmLElBQUlQLEtBQUtRLFNBQVMsS0FBSyxRQUFRO1FBQzNCLE1BQU0sQ0FBQ0MsY0FBY0MsWUFBWSxHQUFHbkIsU0FBU0ssSUFBSSxDQUFDQyxPQUFPLENBQUNLLEtBQUs7UUFDL0QsTUFBTSxDQUFDUyxXQUFXQyxTQUFTLEdBQUdyQixTQUFTSyxJQUFJLENBQUNFLElBQUksQ0FBQ0ksS0FBSztRQUN0RCxNQUFNVyxRQUFRO1FBQ2RQLE1BQU1RLElBQUksQ0FBQ2IsY0FBYyxPQUFPUSxlQUFlQyxhQUFhVCxjQUFjLE9BQU8sT0FBTyxNQUFNQyxNQUFNRCxjQUFjLE9BQU9VLFlBQVlDLFVBQVUsQ0FBQyxDQUFDLEVBQUVSLEdBQUcsQ0FBQyxFQUFFRCxNQUFNVTtRQUMvSixJQUFJWixjQUFjLE1BQU07WUFDcEJNLEtBQUtPLElBQUksQ0FBQztnQkFDTlQsT0FBT0wsS0FBS0ssS0FBSztZQUNyQjtRQUNKLE9BQU87WUFDSEUsS0FBS08sSUFBSSxDQUFDO2dCQUNOVCxPQUFPTCxLQUFLSyxLQUFLO2dCQUNqQixtRkFBbUY7Z0JBQ25GVSxRQUFRLFlBQVlmLEtBQUtlLE1BQU0sR0FBR2YsS0FBS2UsTUFBTSxDQUFDQSxNQUFNLEdBQUdmLEtBQUtlLE1BQU07Z0JBQ2xFQyxXQUFXaEIsS0FBS2dCLFNBQVM7WUFDN0I7UUFDSjtRQUNBLE9BQU87WUFDSFY7WUFDQUM7UUFDSjtJQUNKO0lBQ0EsTUFBTSxDQUFDVSxPQUFPQyxLQUFLLEdBQUczQixTQUFTQyxHQUFHLENBQUNVLEtBQUs7SUFDeEMsTUFBTVYsTUFBTSxDQUFDO3VCQUNNLEVBQUVTLGNBQWMsT0FBT2dCLFFBQVFDLEtBQUs7V0FDaEQsRUFBRWpCLGNBQWMsT0FBTyxVQUFVLFFBQVE7O0VBRWxELENBQUM7SUFDQ0ssTUFBTVEsSUFBSSxDQUFDLE1BQU1iLGNBQWMsT0FBTyxPQUFPLE1BQU1DLE1BQU0sQ0FBQyxDQUFDLEVBQUVFLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFRCxLQUFLLEVBQUUsQ0FBQyxFQUFFO0lBQ2xGSSxLQUFLTyxJQUFJLENBQUN0QixLQUFLLENBQUMsRUFBRUEsSUFBSSxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsRUFBRUEsSUFBSSxzQkFBc0IsQ0FBQztJQUMzRSxJQUFJUyxjQUFjLE1BQU07UUFDcEJNLEtBQUtPLElBQUksQ0FBQztZQUNOVDtZQUNBYyxTQUFTbkIsS0FBS21CLE9BQU87UUFDekI7SUFDSixPQUFPO1FBQ0haLEtBQUtPLElBQUksQ0FBQztZQUNOVDtZQUNBVSxRQUFRZixLQUFLZSxNQUFNO1lBQ25CQyxXQUFXaEIsS0FBS2dCLFNBQVM7WUFDekJHLFNBQVNuQixLQUFLbUIsT0FBTztRQUN6QjtJQUNKO0lBQ0EsT0FBTztRQUNIYjtRQUNBQztJQUNKO0FBQ0o7QUFDQSxpREFBaUQ7QUFDakQsTUFBTWEsZ0JBQWdCLENBQUMsRUFBRUMsSUFBR0MsT0FBTyxFQUFHZCxZQUFXLEtBQUssRUFBRyxHQUFHLENBQUNlO1FBQ3JELE1BQU1DLFdBQVdELE1BQU1sQixLQUFLO1FBQzVCLE1BQU1BLFFBQVFqQixXQUFXb0MsWUFBWUMsT0FBT0MsV0FBVyxDQUFDRixZQUFZQTtRQUNwRSxNQUFNLEVBQUVsQixLQUFLLEVBQUdDLElBQUksRUFBRyxHQUFHUixzQkFBc0I7WUFDNUMsR0FBR3dCLEtBQUs7WUFDUmY7WUFDQUg7UUFDSjtRQUNBLE1BQU1zQixLQUFLSixNQUFNdEIsU0FBUyxLQUFLLFVBQVVzQixNQUFNUixNQUFNLElBQUtRLENBQUFBLE1BQU1SLE1BQU0sWUFBWWEsU0FBUyxXQUFXTCxNQUFNUixNQUFNLENBQUNBLE1BQU0sSUFBSSxVQUFVO1FBQ3ZJTSxDQUFDLENBQUNNLEdBQUcsQ0FBQ0UsS0FBSyxDQUFDLE1BQU07WUFDZHZCLE1BQU13QixJQUFJLENBQUM7U0FDZCxDQUFDQyxNQUFNLENBQUN4QjtJQUNiO0FBQ0o7O0NBRUMsR0FBRyxTQUFTeUIsV0FBV2hDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLE1BQU0sRUFBRWlDLFVBQVMsSUFBSSxJQUFJLEVBQUcsR0FBR2pDO0lBQy9CLE1BQU1RLFlBQVlSLEtBQUtRLFNBQVMsSUFBSyxNQUFrQixHQUFjLFNBQVMsQ0FBSTtJQUNsRixNQUFNLEVBQUUwQixTQUFRZCxjQUFjO1FBQzFCQyxHQUFHckIsS0FBS3NCLE9BQU87UUFDZmQ7SUFDSixFQUFFLEVBQUcsR0FBR1I7SUFDUixPQUFPO1FBQ0gsT0FBTyxDQUFDLEVBQUVtQyxFQUFFLEVBQUdDLElBQUksRUFBRztZQUNsQixPQUFPbEQsbUVBQVVBLENBQUMsQ0FBQ21EO2dCQUNmLEtBQUs7Z0JBQ0xKLFFBQVE7b0JBQ0osR0FBR0UsRUFBRTtvQkFDTGxDLFdBQVc7Z0JBQ2YsTUFBTWlDLE9BQU87b0JBQ1QsR0FBR0MsRUFBRTtvQkFDTGxDLFdBQVc7Z0JBQ2Y7Z0JBQ0EsTUFBTXFDLG1CQUFtQkMsS0FBS0MsR0FBRztnQkFDakMsU0FBU0MsVUFBVTFCLE1BQU07b0JBQ3JCLE1BQU1DLFlBQVl1QixLQUFLQyxHQUFHLEtBQUtGO29CQUMvQkwsUUFBUTt3QkFDSixHQUFHRSxFQUFFO3dCQUNMbEMsV0FBVzt3QkFDWGM7b0JBQ0osTUFBTW1CLE9BQU87d0JBQ1QsR0FBR0MsRUFBRTt3QkFDTGxDLFdBQVc7d0JBQ1hlO3dCQUNBRDtvQkFDSjtnQkFDSjtnQkFDQSxPQUFPcUIsS0FBS0QsSUFBSU8sSUFBSSxDQUFDdkQsNERBQUdBLENBQUM7b0JBQ3JCaUQsTUFBTXJCLE1BQU07d0JBQ1IwQixVQUFVMUI7b0JBQ2Q7b0JBQ0E0QixPQUFPNUIsTUFBTTt3QkFDVDBCLFVBQVUxQjtvQkFDZDtnQkFDSixJQUFJNkIsU0FBUyxDQUFDUDtZQUNsQjtRQUNKO0lBQ0o7QUFDSjtBQUVzQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3QvbGlua3MvbG9nZ2VyTGluay5tanM/YTIxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvYnNlcnZhYmxlLCB0YXAgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvb2JzZXJ2YWJsZSc7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbS5pdGVyYWJsZVwiIC8+XG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gRm9ybURhdGEgaXMgbm90IHN1cHBvcnRlZFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEZvcm1EYXRhO1xufVxuY29uc3QgcGFsZXR0ZXMgPSB7XG4gICAgY3NzOiB7XG4gICAgICAgIHF1ZXJ5OiBbXG4gICAgICAgICAgICAnNzJlM2ZmJyxcbiAgICAgICAgICAgICczZmIwZDgnXG4gICAgICAgIF0sXG4gICAgICAgIG11dGF0aW9uOiBbXG4gICAgICAgICAgICAnYzVhM2ZjJyxcbiAgICAgICAgICAgICc5MDRkZmMnXG4gICAgICAgIF0sXG4gICAgICAgIHN1YnNjcmlwdGlvbjogW1xuICAgICAgICAgICAgJ2ZmNDllMScsXG4gICAgICAgICAgICAnZDgzZmJlJ1xuICAgICAgICBdXG4gICAgfSxcbiAgICBhbnNpOiB7XG4gICAgICAgIHJlZ3VsYXI6IHtcbiAgICAgICAgICAgIC8vIEN5YW4gYmFja2dyb3VuZCwgYmxhY2sgYW5kIHdoaXRlIHRleHQgcmVzcGVjdGl2ZWx5XG4gICAgICAgICAgICBxdWVyeTogW1xuICAgICAgICAgICAgICAgICdcXHgxYlszMDs0Nm0nLFxuICAgICAgICAgICAgICAgICdcXHgxYls5Nzs0Nm0nXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgLy8gTWFnZW50YSBiYWNrZ3JvdW5kLCBibGFjayBhbmQgd2hpdGUgdGV4dCByZXNwZWN0aXZlbHlcbiAgICAgICAgICAgIG11dGF0aW9uOiBbXG4gICAgICAgICAgICAgICAgJ1xceDFiWzMwOzQ1bScsXG4gICAgICAgICAgICAgICAgJ1xceDFiWzk3OzQ1bSdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAvLyBHcmVlbiBiYWNrZ3JvdW5kLCBibGFjayBhbmQgd2hpdGUgdGV4dCByZXNwZWN0aXZlbHlcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogW1xuICAgICAgICAgICAgICAgICdcXHgxYlszMDs0Mm0nLFxuICAgICAgICAgICAgICAgICdcXHgxYls5Nzs0Mm0nXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIGJvbGQ6IHtcbiAgICAgICAgICAgIHF1ZXJ5OiBbXG4gICAgICAgICAgICAgICAgJ1xceDFiWzE7MzA7NDZtJyxcbiAgICAgICAgICAgICAgICAnXFx4MWJbMTs5Nzs0Nm0nXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbXV0YXRpb246IFtcbiAgICAgICAgICAgICAgICAnXFx4MWJbMTszMDs0NW0nLFxuICAgICAgICAgICAgICAgICdcXHgxYlsxOzk3OzQ1bSdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzdWJzY3JpcHRpb246IFtcbiAgICAgICAgICAgICAgICAnXFx4MWJbMTszMDs0Mm0nLFxuICAgICAgICAgICAgICAgICdcXHgxYlsxOzk3OzQybSdcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH1cbn07XG5mdW5jdGlvbiBjb25zdHJ1Y3RQYXJ0c0FuZEFyZ3Mob3B0cykge1xuICAgIGNvbnN0IHsgZGlyZWN0aW9uICwgdHlwZSAsIHBhdGggLCBpZCAsIGlucHV0ICB9ID0gb3B0cztcbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGNvbnN0IGFyZ3MgPSBbXTtcbiAgICBpZiAob3B0cy5jb2xvck1vZGUgPT09ICdhbnNpJykge1xuICAgICAgICBjb25zdCBbbGlnaHRSZWd1bGFyLCBkYXJrUmVndWxhcl0gPSBwYWxldHRlcy5hbnNpLnJlZ3VsYXJbdHlwZV07XG4gICAgICAgIGNvbnN0IFtsaWdodEJvbGQsIGRhcmtCb2xkXSA9IHBhbGV0dGVzLmFuc2kuYm9sZFt0eXBlXTtcbiAgICAgICAgY29uc3QgcmVzZXQgPSAnXFx4MWJbMG0nO1xuICAgICAgICBwYXJ0cy5wdXNoKGRpcmVjdGlvbiA9PT0gJ3VwJyA/IGxpZ2h0UmVndWxhciA6IGRhcmtSZWd1bGFyLCBkaXJlY3Rpb24gPT09ICd1cCcgPyAnPj4nIDogJzw8JywgdHlwZSwgZGlyZWN0aW9uID09PSAndXAnID8gbGlnaHRCb2xkIDogZGFya0JvbGQsIGAjJHtpZH1gLCBwYXRoLCByZXNldCk7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgaW5wdXQ6IG9wdHMuaW5wdXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJncy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpbnB1dDogb3B0cy5pbnB1dCxcbiAgICAgICAgICAgICAgICAvLyBzdHJpcCBjb250ZXh0IGZyb20gcmVzdWx0IGNhdXNlIGl0J3MgdG9vIG5vaXN5IGluIHRlcm1pbmFsIHdpaHRvdXQgY29sbGFwc2UgbW9kZVxuICAgICAgICAgICAgICAgIHJlc3VsdDogJ3Jlc3VsdCcgaW4gb3B0cy5yZXN1bHQgPyBvcHRzLnJlc3VsdC5yZXN1bHQgOiBvcHRzLnJlc3VsdCxcbiAgICAgICAgICAgICAgICBlbGFwc2VkTXM6IG9wdHMuZWxhcHNlZE1zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGFydHMsXG4gICAgICAgICAgICBhcmdzXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IFtsaWdodCwgZGFya10gPSBwYWxldHRlcy5jc3NbdHlwZV07XG4gICAgY29uc3QgY3NzID0gYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMke2RpcmVjdGlvbiA9PT0gJ3VwJyA/IGxpZ2h0IDogZGFya307IFxuICAgIGNvbG9yOiAke2RpcmVjdGlvbiA9PT0gJ3VwJyA/ICdibGFjaycgOiAnd2hpdGUnfTtcbiAgICBwYWRkaW5nOiAycHg7XG4gIGA7XG4gICAgcGFydHMucHVzaCgnJWMnLCBkaXJlY3Rpb24gPT09ICd1cCcgPyAnPj4nIDogJzw8JywgdHlwZSwgYCMke2lkfWAsIGAlYyR7cGF0aH0lY2AsICclTycpO1xuICAgIGFyZ3MucHVzaChjc3MsIGAke2Nzc307IGZvbnQtd2VpZ2h0OiBib2xkO2AsIGAke2Nzc307IGZvbnQtd2VpZ2h0OiBub3JtYWw7YCk7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge1xuICAgICAgICBhcmdzLnB1c2goe1xuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICBjb250ZXh0OiBvcHRzLmNvbnRleHRcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXJncy5wdXNoKHtcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgcmVzdWx0OiBvcHRzLnJlc3VsdCxcbiAgICAgICAgICAgIGVsYXBzZWRNczogb3B0cy5lbGFwc2VkTXMsXG4gICAgICAgICAgICBjb250ZXh0OiBvcHRzLmNvbnRleHRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBhcnRzLFxuICAgICAgICBhcmdzXG4gICAgfTtcbn1cbi8vIG1heWJlIHRoaXMgc2hvdWxkIGJlIG1vdmVkIHRvIGl0J3Mgb3duIHBhY2thZ2VcbmNvbnN0IGRlZmF1bHRMb2dnZXIgPSAoeyBjID1jb25zb2xlICwgY29sb3JNb2RlID0nY3NzJyAgfSk9Pihwcm9wcyk9PntcbiAgICAgICAgY29uc3QgcmF3SW5wdXQgPSBwcm9wcy5pbnB1dDtcbiAgICAgICAgY29uc3QgaW5wdXQgPSBpc0Zvcm1EYXRhKHJhd0lucHV0KSA/IE9iamVjdC5mcm9tRW50cmllcyhyYXdJbnB1dCkgOiByYXdJbnB1dDtcbiAgICAgICAgY29uc3QgeyBwYXJ0cyAsIGFyZ3MgIH0gPSBjb25zdHJ1Y3RQYXJ0c0FuZEFyZ3Moe1xuICAgICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgICBjb2xvck1vZGUsXG4gICAgICAgICAgICBpbnB1dFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZm4gPSBwcm9wcy5kaXJlY3Rpb24gPT09ICdkb3duJyAmJiBwcm9wcy5yZXN1bHQgJiYgKHByb3BzLnJlc3VsdCBpbnN0YW5jZW9mIEVycm9yIHx8ICdlcnJvcicgaW4gcHJvcHMucmVzdWx0LnJlc3VsdCkgPyAnZXJyb3InIDogJ2xvZyc7XG4gICAgICAgIGNbZm5dLmFwcGx5KG51bGwsIFtcbiAgICAgICAgICAgIHBhcnRzLmpvaW4oJyAnKVxuICAgICAgICBdLmNvbmNhdChhcmdzKSk7XG4gICAgfTtcbi8qKlxuICogQHNlZSBodHRwczovL3RycGMuaW8vZG9jcy9jbGllbnQvbGlua3MvbG9nZ2VyTGlua1xuICovIGZ1bmN0aW9uIGxvZ2dlckxpbmsob3B0cyA9IHt9KSB7XG4gICAgY29uc3QgeyBlbmFibGVkID0oKT0+dHJ1ZSAgfSA9IG9wdHM7XG4gICAgY29uc3QgY29sb3JNb2RlID0gb3B0cy5jb2xvck1vZGUgPz8gKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gJ2Fuc2knIDogJ2NzcycpO1xuICAgIGNvbnN0IHsgbG9nZ2VyID1kZWZhdWx0TG9nZ2VyKHtcbiAgICAgICAgYzogb3B0cy5jb25zb2xlLFxuICAgICAgICBjb2xvck1vZGVcbiAgICB9KSAgfSA9IG9wdHM7XG4gICAgcmV0dXJuICgpPT57XG4gICAgICAgIHJldHVybiAoeyBvcCAsIG5leHQgIH0pPT57XG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZSgob2JzZXJ2ZXIpPT57XG4gICAgICAgICAgICAgICAgLy8gLT5cbiAgICAgICAgICAgICAgICBlbmFibGVkKHtcbiAgICAgICAgICAgICAgICAgICAgLi4ub3AsXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ3VwJ1xuICAgICAgICAgICAgICAgIH0pICYmIGxvZ2dlcih7XG4gICAgICAgICAgICAgICAgICAgIC4uLm9wLFxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICd1cCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0U3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBsb2dSZXN1bHQocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsYXBzZWRNcyA9IERhdGUubm93KCkgLSByZXF1ZXN0U3RhcnRUaW1lO1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnZG93bicsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgfSkgJiYgbG9nZ2VyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnZG93bicsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGFwc2VkTXMsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KG9wKS5waXBlKHRhcCh7XG4gICAgICAgICAgICAgICAgICAgIG5leHQgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nUmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ1Jlc3VsdChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBsb2dnZXJMaW5rIH07XG4iXSwibmFtZXMiOlsib2JzZXJ2YWJsZSIsInRhcCIsImlzRm9ybURhdGEiLCJ2YWx1ZSIsIkZvcm1EYXRhIiwicGFsZXR0ZXMiLCJjc3MiLCJxdWVyeSIsIm11dGF0aW9uIiwic3Vic2NyaXB0aW9uIiwiYW5zaSIsInJlZ3VsYXIiLCJib2xkIiwiY29uc3RydWN0UGFydHNBbmRBcmdzIiwib3B0cyIsImRpcmVjdGlvbiIsInR5cGUiLCJwYXRoIiwiaWQiLCJpbnB1dCIsInBhcnRzIiwiYXJncyIsImNvbG9yTW9kZSIsImxpZ2h0UmVndWxhciIsImRhcmtSZWd1bGFyIiwibGlnaHRCb2xkIiwiZGFya0JvbGQiLCJyZXNldCIsInB1c2giLCJyZXN1bHQiLCJlbGFwc2VkTXMiLCJsaWdodCIsImRhcmsiLCJjb250ZXh0IiwiZGVmYXVsdExvZ2dlciIsImMiLCJjb25zb2xlIiwicHJvcHMiLCJyYXdJbnB1dCIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiZm4iLCJFcnJvciIsImFwcGx5Iiwiam9pbiIsImNvbmNhdCIsImxvZ2dlckxpbmsiLCJlbmFibGVkIiwibG9nZ2VyIiwib3AiLCJuZXh0Iiwib2JzZXJ2ZXIiLCJyZXF1ZXN0U3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsImxvZ1Jlc3VsdCIsInBpcGUiLCJlcnJvciIsInN1YnNjcmliZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/links/loggerLink.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/links/wsLink.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@trpc/client/dist/links/wsLink.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createWSClient: () => (/* binding */ createWSClient),\n/* harmony export */   wsLink: () => (/* binding */ wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-0de4d231.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n\n\n\n/* istanbul ignore next -- @preserve */ const retryDelay = (attemptIndex)=>attemptIndex === 0 ? 0 : Math.min(1000 * 2 ** attemptIndex, 30000);\nfunction createWSClient(opts) {\n    const { url, WebSocket: WebSocketImpl = WebSocket, retryDelayMs: retryDelayFn = retryDelay, onOpen, onClose } = opts;\n    /* istanbul ignore next -- @preserve */ if (!WebSocketImpl) {\n        throw new Error(\"No WebSocket implementation found - you probably don't want to use this on the server, but if you do you need to pass a `WebSocket`-ponyfill\");\n    }\n    /**\n   * outgoing messages buffer whilst not open\n   */ let outgoing = [];\n    const pendingRequests = Object.create(null);\n    let connectAttempt = 0;\n    let dispatchTimer = null;\n    let connectTimer = null;\n    let activeConnection = createWS();\n    let state = \"connecting\";\n    /**\n   * tries to send the list of messages\n   */ function dispatch() {\n        if (state !== \"open\" || dispatchTimer) {\n            return;\n        }\n        dispatchTimer = setTimeout(()=>{\n            dispatchTimer = null;\n            if (outgoing.length === 1) {\n                // single send\n                activeConnection.send(JSON.stringify(outgoing.pop()));\n            } else {\n                // batch send\n                activeConnection.send(JSON.stringify(outgoing));\n            }\n            // clear\n            outgoing = [];\n        });\n    }\n    function tryReconnect() {\n        if (connectTimer !== null || state === \"closed\") {\n            return;\n        }\n        const timeout = retryDelayFn(connectAttempt++);\n        reconnectInMs(timeout);\n    }\n    function reconnect() {\n        state = \"connecting\";\n        const oldConnection = activeConnection;\n        activeConnection = createWS();\n        closeIfNoPending(oldConnection);\n    }\n    function reconnectInMs(ms) {\n        if (connectTimer) {\n            return;\n        }\n        state = \"connecting\";\n        connectTimer = setTimeout(reconnect, ms);\n    }\n    function closeIfNoPending(conn) {\n        // disconnect as soon as there are are no pending result\n        const hasPendingRequests = Object.values(pendingRequests).some((p)=>p.ws === conn);\n        if (!hasPendingRequests) {\n            conn.close();\n        }\n    }\n    function closeActiveSubscriptions() {\n        Object.values(pendingRequests).forEach((req)=>{\n            if (req.type === \"subscription\") {\n                req.callbacks.complete();\n            }\n        });\n    }\n    function resumeSubscriptionOnReconnect(req) {\n        if (outgoing.some((r)=>r.id === req.op.id)) {\n            return;\n        }\n        request(req.op, req.callbacks);\n    }\n    function createWS() {\n        const urlString = typeof url === \"function\" ? url() : url;\n        const conn = new WebSocketImpl(urlString);\n        clearTimeout(connectTimer);\n        connectTimer = null;\n        conn.addEventListener(\"open\", ()=>{\n            /* istanbul ignore next -- @preserve */ if (conn !== activeConnection) {\n                return;\n            }\n            connectAttempt = 0;\n            state = \"open\";\n            onOpen?.();\n            dispatch();\n        });\n        conn.addEventListener(\"error\", ()=>{\n            if (conn === activeConnection) {\n                tryReconnect();\n            }\n        });\n        const handleIncomingRequest = (req)=>{\n            if (req.method === \"reconnect\" && conn === activeConnection) {\n                if (state === \"open\") {\n                    onClose?.();\n                }\n                reconnect();\n                // notify subscribers\n                for (const pendingReq of Object.values(pendingRequests)){\n                    if (pendingReq.type === \"subscription\") {\n                        resumeSubscriptionOnReconnect(pendingReq);\n                    }\n                }\n            }\n        };\n        const handleIncomingResponse = (data)=>{\n            const req = data.id !== null && pendingRequests[data.id];\n            if (!req) {\n                // do something?\n                return;\n            }\n            req.callbacks.next?.(data);\n            if (req.ws !== activeConnection && conn === activeConnection) {\n                const oldWs = req.ws;\n                // gracefully replace old connection with this\n                req.ws = activeConnection;\n                closeIfNoPending(oldWs);\n            }\n            if (\"result\" in data && data.result.type === \"stopped\" && conn === activeConnection) {\n                req.callbacks.complete();\n            }\n        };\n        conn.addEventListener(\"message\", ({ data })=>{\n            const msg = JSON.parse(data);\n            if (\"method\" in msg) {\n                handleIncomingRequest(msg);\n            } else {\n                handleIncomingResponse(msg);\n            }\n            if (conn !== activeConnection || state === \"closed\") {\n                // when receiving a message, we close old connection that has no pending requests\n                closeIfNoPending(conn);\n            }\n        });\n        conn.addEventListener(\"close\", ({ code })=>{\n            if (state === \"open\") {\n                onClose?.({\n                    code\n                });\n            }\n            if (activeConnection === conn) {\n                // connection might have been replaced already\n                tryReconnect();\n            }\n            for (const [key, req] of Object.entries(pendingRequests)){\n                if (req.ws !== conn) {\n                    continue;\n                }\n                if (state === \"closed\") {\n                    // If the connection was closed, we just call `complete()` on the request\n                    delete pendingRequests[key];\n                    req.callbacks.complete?.();\n                    continue;\n                }\n                // The connection was closed either unexpectedly or because of a reconnect\n                if (req.type === \"subscription\") {\n                    // Subscriptions will resume after we've reconnected\n                    resumeSubscriptionOnReconnect(req);\n                } else {\n                    // Queries and mutations will error if interrupted\n                    delete pendingRequests[key];\n                    req.callbacks.error?.(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(new TRPCWebSocketClosedError(\"WebSocket closed prematurely\")));\n                }\n            }\n        });\n        return conn;\n    }\n    function request(op, callbacks) {\n        const { type, input, path, id } = op;\n        const envelope = {\n            id,\n            method: type,\n            params: {\n                input,\n                path\n            }\n        };\n        pendingRequests[id] = {\n            ws: activeConnection,\n            type,\n            callbacks,\n            op\n        };\n        // enqueue message\n        outgoing.push(envelope);\n        dispatch();\n        return ()=>{\n            const callbacks = pendingRequests[id]?.callbacks;\n            delete pendingRequests[id];\n            outgoing = outgoing.filter((msg)=>msg.id !== id);\n            callbacks?.complete?.();\n            if (activeConnection.readyState === WebSocketImpl.OPEN && op.type === \"subscription\") {\n                outgoing.push({\n                    id,\n                    method: \"subscription.stop\"\n                });\n                dispatch();\n            }\n        };\n    }\n    return {\n        close: ()=>{\n            state = \"closed\";\n            onClose?.();\n            closeActiveSubscriptions();\n            closeIfNoPending(activeConnection);\n            clearTimeout(connectTimer);\n            connectTimer = null;\n        },\n        request,\n        getConnection () {\n            return activeConnection;\n        }\n    };\n}\nclass TRPCWebSocketClosedError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"TRPCWebSocketClosedError\";\n        Object.setPrototypeOf(this, TRPCWebSocketClosedError.prototype);\n    }\n}\n/**\n * @see https://trpc.io/docs/client/links/wsLink\n */ function wsLink(opts) {\n    return (runtime)=>{\n        const { client } = opts;\n        return ({ op })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const { type, path, id, context } = op;\n                const input = runtime.transformer.serialize(op.input);\n                const unsub = client.request({\n                    type,\n                    path,\n                    input,\n                    id,\n                    context\n                }, {\n                    error (err) {\n                        observer.error(err);\n                        unsub();\n                    },\n                    complete () {\n                        observer.complete();\n                    },\n                    next (message) {\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(message, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error));\n                            return;\n                        }\n                        observer.next({\n                            result: transformed.result\n                        });\n                        if (op.type !== \"subscription\") {\n                            // if it isn't a subscription we don't care about next response\n                            unsub();\n                            observer.complete();\n                        }\n                    }\n                });\n                return ()=>{\n                    unsub();\n                };\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/links/wsLink.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createChain),\n/* harmony export */   s: () => (/* binding */ splitLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\");\n\n/** @internal */ function createChain(opts) {\n    return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n        function execute(index = 0, op = opts.op) {\n            const next = opts.links[index];\n            if (!next) {\n                throw new Error(\"No more links to execute - did you forget to add an ending link?\");\n            }\n            const subscription = next({\n                op,\n                next (nextOp) {\n                    const nextObserver = execute(index + 1, nextOp);\n                    return nextObserver;\n                }\n            });\n            return subscription;\n        }\n        const obs$ = execute();\n        return obs$.subscribe(observer);\n    });\n}\nfunction asArray(value) {\n    return Array.isArray(value) ? value : [\n        value\n    ];\n}\nfunction splitLink(opts) {\n    return (runtime)=>{\n        const yes = asArray(opts.true).map((link)=>link(runtime));\n        const no = asArray(opts.false).map((link)=>link(runtime));\n        return (props)=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const links = opts.condition(props.op) ? yes : no;\n                return createChain({\n                    op: props.op,\n                    links\n                }).subscribe(observer);\n            });\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3Qvc3BsaXRMaW5rLTRjNzVmN2JlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7QUFFckQsY0FBYyxHQUFHLFNBQVNDLFlBQVlDLElBQUk7SUFDdEMsT0FBT0YsbUVBQVVBLENBQUMsQ0FBQ0c7UUFDZixTQUFTQyxRQUFRQyxRQUFRLENBQUMsRUFBRUMsS0FBS0osS0FBS0ksRUFBRTtZQUNwQyxNQUFNQyxPQUFPTCxLQUFLTSxLQUFLLENBQUNILE1BQU07WUFDOUIsSUFBSSxDQUFDRSxNQUFNO2dCQUNQLE1BQU0sSUFBSUUsTUFBTTtZQUNwQjtZQUNBLE1BQU1DLGVBQWVILEtBQUs7Z0JBQ3RCRDtnQkFDQUMsTUFBTUksTUFBTTtvQkFDUixNQUFNQyxlQUFlUixRQUFRQyxRQUFRLEdBQUdNO29CQUN4QyxPQUFPQztnQkFDWDtZQUNKO1lBQ0EsT0FBT0Y7UUFDWDtRQUNBLE1BQU1HLE9BQU9UO1FBQ2IsT0FBT1MsS0FBS0MsU0FBUyxDQUFDWDtJQUMxQjtBQUNKO0FBRUEsU0FBU1ksUUFBUUMsS0FBSztJQUNsQixPQUFPQyxNQUFNQyxPQUFPLENBQUNGLFNBQVNBLFFBQVE7UUFDbENBO0tBQ0g7QUFDTDtBQUNBLFNBQVNHLFVBQVVqQixJQUFJO0lBQ25CLE9BQU8sQ0FBQ2tCO1FBQ0osTUFBTUMsTUFBTU4sUUFBUWIsS0FBS29CLElBQUksRUFBRUMsR0FBRyxDQUFDLENBQUNDLE9BQU9BLEtBQUtKO1FBQ2hELE1BQU1LLEtBQUtWLFFBQVFiLEtBQUt3QixLQUFLLEVBQUVILEdBQUcsQ0FBQyxDQUFDQyxPQUFPQSxLQUFLSjtRQUNoRCxPQUFPLENBQUNPO1lBQ0osT0FBTzNCLG1FQUFVQSxDQUFDLENBQUNHO2dCQUNmLE1BQU1LLFFBQVFOLEtBQUswQixTQUFTLENBQUNELE1BQU1yQixFQUFFLElBQUllLE1BQU1JO2dCQUMvQyxPQUFPeEIsWUFBWTtvQkFDZkssSUFBSXFCLE1BQU1yQixFQUFFO29CQUNaRTtnQkFDSixHQUFHTSxTQUFTLENBQUNYO1lBQ2pCO1FBQ0o7SUFDSjtBQUNKO0FBRTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9zcGxpdExpbmstNGM3NWY3YmUubWpzPzYzMTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb2JzZXJ2YWJsZSB9IGZyb20gJ0B0cnBjL3NlcnZlci9vYnNlcnZhYmxlJztcblxuLyoqIEBpbnRlcm5hbCAqLyBmdW5jdGlvbiBjcmVhdGVDaGFpbihvcHRzKSB7XG4gICAgcmV0dXJuIG9ic2VydmFibGUoKG9ic2VydmVyKT0+e1xuICAgICAgICBmdW5jdGlvbiBleGVjdXRlKGluZGV4ID0gMCwgb3AgPSBvcHRzLm9wKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gb3B0cy5saW5rc1tpbmRleF07XG4gICAgICAgICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1vcmUgbGlua3MgdG8gZXhlY3V0ZSAtIGRpZCB5b3UgZm9yZ2V0IHRvIGFkZCBhbiBlbmRpbmcgbGluaz8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IG5leHQoe1xuICAgICAgICAgICAgICAgIG9wLFxuICAgICAgICAgICAgICAgIG5leHQgKG5leHRPcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0T2JzZXJ2ZXIgPSBleGVjdXRlKGluZGV4ICsgMSwgbmV4dE9wKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHRPYnNlcnZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2JzJCA9IGV4ZWN1dGUoKTtcbiAgICAgICAgcmV0dXJuIG9icyQuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYXNBcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW1xuICAgICAgICB2YWx1ZVxuICAgIF07XG59XG5mdW5jdGlvbiBzcGxpdExpbmsob3B0cykge1xuICAgIHJldHVybiAocnVudGltZSk9PntcbiAgICAgICAgY29uc3QgeWVzID0gYXNBcnJheShvcHRzLnRydWUpLm1hcCgobGluayk9PmxpbmsocnVudGltZSkpO1xuICAgICAgICBjb25zdCBubyA9IGFzQXJyYXkob3B0cy5mYWxzZSkubWFwKChsaW5rKT0+bGluayhydW50aW1lKSk7XG4gICAgICAgIHJldHVybiAocHJvcHMpPT57XG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZSgob2JzZXJ2ZXIpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgbGlua3MgPSBvcHRzLmNvbmRpdGlvbihwcm9wcy5vcCkgPyB5ZXMgOiBubztcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2hhaW4oe1xuICAgICAgICAgICAgICAgICAgICBvcDogcHJvcHMub3AsXG4gICAgICAgICAgICAgICAgICAgIGxpbmtzXG4gICAgICAgICAgICAgICAgfSkuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUNoYWluIGFzIGMsIHNwbGl0TGluayBhcyBzIH07XG4iXSwibmFtZXMiOlsib2JzZXJ2YWJsZSIsImNyZWF0ZUNoYWluIiwib3B0cyIsIm9ic2VydmVyIiwiZXhlY3V0ZSIsImluZGV4Iiwib3AiLCJuZXh0IiwibGlua3MiLCJFcnJvciIsInN1YnNjcmlwdGlvbiIsIm5leHRPcCIsIm5leHRPYnNlcnZlciIsIm9icyQiLCJzdWJzY3JpYmUiLCJhc0FycmF5IiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJzcGxpdExpbmsiLCJydW50aW1lIiwieWVzIiwidHJ1ZSIsIm1hcCIsImxpbmsiLCJubyIsImZhbHNlIiwicHJvcHMiLCJjb25kaXRpb24iLCJjIiwicyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   t: () => (/* binding */ transformResult)\n/* harmony export */ });\nfunction isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\n// FIXME:\n// - the generics here are probably unnecessary\n// - the RPC-spec could probably be simplified to combine HTTP + WS\n/** @internal */ function transformResultInner(response, runtime) {\n    if (\"error\" in response) {\n        const error = runtime.transformer.deserialize(response.error);\n        return {\n            ok: false,\n            error: {\n                ...response,\n                error\n            }\n        };\n    }\n    const result = {\n        ...response.result,\n        ...(!response.result.type || response.result.type === \"data\") && {\n            type: \"data\",\n            data: runtime.transformer.deserialize(response.result.data)\n        }\n    };\n    return {\n        ok: true,\n        result\n    };\n}\nclass TransformResultError extends Error {\n    constructor(){\n        super(\"Unable to transform response from server\");\n    }\n}\n/**\n * Transforms and validates that the result is a valid TRPCResponse\n * @internal\n */ function transformResult(response, runtime) {\n    let result;\n    try {\n        // Use the data transformers on the JSON-response\n        result = transformResultInner(response, runtime);\n    } catch (err) {\n        throw new TransformResultError();\n    }\n    // check that output of the transformers is a valid TRPCResponse\n    if (!result.ok && (!isObject(result.error.error) || typeof result.error.error.code !== \"number\")) {\n        throw new TransformResultError();\n    }\n    if (result.ok && !isObject(result.result)) {\n        throw new TransformResultError();\n    }\n    return result;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3QvdHJhbnNmb3JtUmVzdWx0LWFjZTg2NGI4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBLFNBQVNDLEtBQUs7SUFDbkIsNkJBQTZCO0lBQzdCLE9BQU8sQ0FBQyxDQUFDQSxTQUFTLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsVUFBVSxPQUFPQSxVQUFVO0FBQ2hFO0FBRUEsU0FBUztBQUNULCtDQUErQztBQUMvQyxtRUFBbUU7QUFDbkUsY0FBYyxHQUFHLFNBQVNHLHFCQUFxQkMsUUFBUSxFQUFFQyxPQUFPO0lBQzVELElBQUksV0FBV0QsVUFBVTtRQUNyQixNQUFNRSxRQUFRRCxRQUFRRSxXQUFXLENBQUNDLFdBQVcsQ0FBQ0osU0FBU0UsS0FBSztRQUM1RCxPQUFPO1lBQ0hHLElBQUk7WUFDSkgsT0FBTztnQkFDSCxHQUFHRixRQUFRO2dCQUNYRTtZQUNKO1FBQ0o7SUFDSjtJQUNBLE1BQU1JLFNBQVM7UUFDWCxHQUFHTixTQUFTTSxNQUFNO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDTixTQUFTTSxNQUFNLENBQUNDLElBQUksSUFBSVAsU0FBU00sTUFBTSxDQUFDQyxJQUFJLEtBQUssTUFBSyxLQUFNO1lBQzdEQSxNQUFNO1lBQ05DLE1BQU1QLFFBQVFFLFdBQVcsQ0FBQ0MsV0FBVyxDQUFDSixTQUFTTSxNQUFNLENBQUNFLElBQUk7UUFDOUQsQ0FBQztJQUNMO0lBQ0EsT0FBTztRQUNISCxJQUFJO1FBQ0pDO0lBQ0o7QUFDSjtBQUNBLE1BQU1HLDZCQUE2QkM7SUFDL0JDLGFBQWE7UUFDVCxLQUFLLENBQUM7SUFDVjtBQUNKO0FBQ0E7OztDQUdDLEdBQUcsU0FBU0MsZ0JBQWdCWixRQUFRLEVBQUVDLE9BQU87SUFDMUMsSUFBSUs7SUFDSixJQUFJO1FBQ0EsaURBQWlEO1FBQ2pEQSxTQUFTUCxxQkFBcUJDLFVBQVVDO0lBQzVDLEVBQUUsT0FBT1ksS0FBSztRQUNWLE1BQU0sSUFBSUo7SUFDZDtJQUNBLGdFQUFnRTtJQUNoRSxJQUFJLENBQUNILE9BQU9ELEVBQUUsSUFBSyxFQUFDVixTQUFTVyxPQUFPSixLQUFLLENBQUNBLEtBQUssS0FBSyxPQUFPSSxPQUFPSixLQUFLLENBQUNBLEtBQUssQ0FBQ1ksSUFBSSxLQUFLLFFBQU8sR0FBSTtRQUM5RixNQUFNLElBQUlMO0lBQ2Q7SUFDQSxJQUFJSCxPQUFPRCxFQUFFLElBQUksQ0FBQ1YsU0FBU1csT0FBT0EsTUFBTSxHQUFHO1FBQ3ZDLE1BQU0sSUFBSUc7SUFDZDtJQUNBLE9BQU9IO0FBQ1g7QUFFK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L3RyYW5zZm9ybVJlc3VsdC1hY2U4NjRiOC5tanM/ZDhlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIC8vIGNoZWNrIHRoYXQgdmFsdWUgaXMgb2JqZWN0XG4gICAgcmV0dXJuICEhdmFsdWUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cbi8vIEZJWE1FOlxuLy8gLSB0aGUgZ2VuZXJpY3MgaGVyZSBhcmUgcHJvYmFibHkgdW5uZWNlc3Nhcnlcbi8vIC0gdGhlIFJQQy1zcGVjIGNvdWxkIHByb2JhYmx5IGJlIHNpbXBsaWZpZWQgdG8gY29tYmluZSBIVFRQICsgV1Ncbi8qKiBAaW50ZXJuYWwgKi8gZnVuY3Rpb24gdHJhbnNmb3JtUmVzdWx0SW5uZXIocmVzcG9uc2UsIHJ1bnRpbWUpIHtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXNwb25zZSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IHJ1bnRpbWUudHJhbnNmb3JtZXIuZGVzZXJpYWxpemUocmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb2s6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICAuLi5yZXNwb25zZSxcbiAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIC4uLnJlc3BvbnNlLnJlc3VsdCxcbiAgICAgICAgLi4uKCFyZXNwb25zZS5yZXN1bHQudHlwZSB8fCByZXNwb25zZS5yZXN1bHQudHlwZSA9PT0gJ2RhdGEnKSAmJiB7XG4gICAgICAgICAgICB0eXBlOiAnZGF0YScsXG4gICAgICAgICAgICBkYXRhOiBydW50aW1lLnRyYW5zZm9ybWVyLmRlc2VyaWFsaXplKHJlc3BvbnNlLnJlc3VsdC5kYXRhKVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgcmVzdWx0XG4gICAgfTtcbn1cbmNsYXNzIFRyYW5zZm9ybVJlc3VsdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCdVbmFibGUgdG8gdHJhbnNmb3JtIHJlc3BvbnNlIGZyb20gc2VydmVyJyk7XG4gICAgfVxufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIGFuZCB2YWxpZGF0ZXMgdGhhdCB0aGUgcmVzdWx0IGlzIGEgdmFsaWQgVFJQQ1Jlc3BvbnNlXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiB0cmFuc2Zvcm1SZXN1bHQocmVzcG9uc2UsIHJ1bnRpbWUpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIC8vIFVzZSB0aGUgZGF0YSB0cmFuc2Zvcm1lcnMgb24gdGhlIEpTT04tcmVzcG9uc2VcbiAgICAgICAgcmVzdWx0ID0gdHJhbnNmb3JtUmVzdWx0SW5uZXIocmVzcG9uc2UsIHJ1bnRpbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgVHJhbnNmb3JtUmVzdWx0RXJyb3IoKTtcbiAgICB9XG4gICAgLy8gY2hlY2sgdGhhdCBvdXRwdXQgb2YgdGhlIHRyYW5zZm9ybWVycyBpcyBhIHZhbGlkIFRSUENSZXNwb25zZVxuICAgIGlmICghcmVzdWx0Lm9rICYmICghaXNPYmplY3QocmVzdWx0LmVycm9yLmVycm9yKSB8fCB0eXBlb2YgcmVzdWx0LmVycm9yLmVycm9yLmNvZGUgIT09ICdudW1iZXInKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHJhbnNmb3JtUmVzdWx0RXJyb3IoKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5vayAmJiAhaXNPYmplY3QocmVzdWx0LnJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zZm9ybVJlc3VsdEVycm9yKCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCB7IGlzT2JqZWN0IGFzIGksIHRyYW5zZm9ybVJlc3VsdCBhcyB0IH07XG4iXSwibmFtZXMiOlsiaXNPYmplY3QiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsInRyYW5zZm9ybVJlc3VsdElubmVyIiwicmVzcG9uc2UiLCJydW50aW1lIiwiZXJyb3IiLCJ0cmFuc2Zvcm1lciIsImRlc2VyaWFsaXplIiwib2siLCJyZXN1bHQiLCJ0eXBlIiwiZGF0YSIsIlRyYW5zZm9ybVJlc3VsdEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInRyYW5zZm9ybVJlc3VsdCIsImVyciIsImNvZGUiLCJpIiwidCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/react-query/dist/createHooksInternal-bdff7171.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@trpc/react-query/dist/createHooksInternal-bdff7171.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCContext),\n/* harmony export */   a: () => (/* binding */ createReactQueryUtilsProxy),\n/* harmony export */   b: () => (/* binding */ createReactProxyDecoration),\n/* harmony export */   c: () => (/* binding */ createHooksInternal),\n/* harmony export */   d: () => (/* binding */ getClientArgs),\n/* harmony export */   e: () => (/* binding */ createUseQueriesProxy),\n/* harmony export */   f: () => (/* binding */ createRootHooks),\n/* harmony export */   g: () => (/* binding */ getQueryKey),\n/* harmony export */   h: () => (/* binding */ contextProps)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/./node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getArrayQueryKey-86134f8b.mjs */ \"(ssr)/./node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs\");\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/./node_modules/@trpc/client/dist/index.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useQuery.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useQueries.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\n\n\n/**\n * We treat `undefined` as an input the same as omitting an `input`\n * https://github.com/trpc/trpc/issues/2290\n */ function getQueryKeyInternal(path, input) {\n    if (path.length) return input === undefined ? [\n        path\n    ] : [\n        path,\n        input\n    ];\n    return [];\n}\n/**\n * Method to extract the query key for a procedure\n * @param procedureOrRouter - procedure or AnyRouter\n * @param input - input to procedureOrRouter\n * @param type - defaults to `any`\n * @link https://trpc.io/docs/getQueryKey\n */ function getQueryKey(..._params) {\n    const [procedureOrRouter, input, type] = _params;\n    // @ts-expect-error - we don't expose _def on the type layer\n    const path = procedureOrRouter._def().path;\n    const dotPath = path.join(\".\");\n    const queryKey = (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(getQueryKeyInternal(dotPath, input), type ?? \"any\");\n    return queryKey;\n}\n/**\n * Create proxy for decorating procedures\n * @internal\n */ function createReactProxyDecoration(name, hooks) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)((opts)=>{\n        const args = opts.args;\n        const pathCopy = [\n            name,\n            ...opts.path\n        ];\n        // The last arg is for instance `.useMutation` or `.useQuery()`\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const lastArg = pathCopy.pop();\n        // The `path` ends up being something like `post.byId`\n        const path = pathCopy.join(\".\");\n        if (lastArg === \"useMutation\") {\n            return hooks[lastArg](path, ...args);\n        }\n        const [input, ...rest] = args;\n        const queryKey = getQueryKeyInternal(path, input);\n        // Expose queryKey helper\n        if (lastArg === \"getQueryKey\") {\n            return (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, rest[0] ?? \"any\");\n        }\n        if (lastArg === \"_def\") {\n            return {\n                path: pathCopy\n            };\n        }\n        if (lastArg.startsWith(\"useSuspense\")) {\n            const opts1 = rest[0] || {};\n            const fn = lastArg === \"useSuspenseQuery\" ? \"useQuery\" : \"useInfiniteQuery\";\n            const result = hooks[fn](queryKey, {\n                ...opts1,\n                suspense: true,\n                enabled: true\n            });\n            return [\n                result.data,\n                result\n            ];\n        }\n        return hooks[lastArg](queryKey, ...rest);\n    });\n}\nconst contextProps = [\n    \"client\",\n    \"ssrContext\",\n    \"ssrState\",\n    \"abortOnUnmount\"\n];\nconst TRPCContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * @internal\n */ function createReactQueryUtilsProxy(context) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createFlatProxy)((key)=>{\n        const contextName = key;\n        if (contextName === \"client\") {\n            return (0,_trpc_client__WEBPACK_IMPORTED_MODULE_2__.createTRPCClientProxy)(context.client);\n        }\n        if (contextProps.includes(contextName)) {\n            return context[contextName];\n        }\n        return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)(({ path, args })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const utilName = pathCopy.pop();\n            const fullPath = pathCopy.join(\".\");\n            const getOpts = (name)=>{\n                if ([\n                    \"setData\",\n                    \"setInfiniteData\"\n                ].includes(name)) {\n                    const [input, updater, ...rest] = args;\n                    const queryKey = getQueryKeyInternal(fullPath, input);\n                    return {\n                        queryKey,\n                        updater,\n                        rest\n                    };\n                }\n                const [input1, ...rest1] = args;\n                const queryKey1 = getQueryKeyInternal(fullPath, input1);\n                return {\n                    queryKey: queryKey1,\n                    rest: rest1\n                };\n            };\n            const { queryKey, rest, updater } = getOpts(utilName);\n            const contextMap = {\n                fetch: ()=>context.fetchQuery(queryKey, ...rest),\n                fetchInfinite: ()=>context.fetchInfiniteQuery(queryKey, ...rest),\n                prefetch: ()=>context.prefetchQuery(queryKey, ...rest),\n                prefetchInfinite: ()=>context.prefetchInfiniteQuery(queryKey, ...rest),\n                ensureData: ()=>context.ensureQueryData(queryKey, ...rest),\n                invalidate: ()=>context.invalidateQueries(queryKey, ...rest),\n                reset: ()=>context.resetQueries(queryKey, ...rest),\n                refetch: ()=>context.refetchQueries(queryKey, ...rest),\n                cancel: ()=>context.cancelQuery(queryKey, ...rest),\n                setData: ()=>{\n                    context.setQueryData(queryKey, updater, ...rest);\n                },\n                setInfiniteData: ()=>{\n                    context.setInfiniteQueryData(queryKey, updater, ...rest);\n                },\n                getData: ()=>context.getQueryData(queryKey),\n                getInfiniteData: ()=>context.getInfiniteQueryData(queryKey)\n            };\n            return contextMap[utilName]();\n        });\n    });\n}\n/**\n * Create proxy for `useQueries` options\n * @internal\n */ function createUseQueriesProxy(client) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)((opts)=>{\n        const path = opts.path.join(\".\");\n        const [input, _opts] = opts.args;\n        const queryKey = getQueryKeyInternal(path, input);\n        const options = {\n            queryKey,\n            queryFn: ()=>{\n                return client.query(path, input, _opts?.trpc);\n            },\n            ..._opts\n        };\n        return options;\n    });\n}\nfunction getClientArgs(pathAndInput, opts) {\n    const [path, input] = pathAndInput;\n    return [\n        path,\n        input,\n        opts?.trpc\n    ];\n}\n/**\n * Makes a stable reference of the `trpc` prop\n */ function useHookResult(value) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(value);\n    ref.current.path = value.path;\n    return ref.current;\n}\n/**\n * @internal\n */ function createRootHooks(config) {\n    const mutationSuccessOverride = (config?.overrides ?? config?.unstable_overrides)?.useMutation?.onSuccess ?? ((options)=>options.originalFn());\n    const Context = config?.context ?? TRPCContext;\n    const ReactQueryContext = config?.reactQueryContext;\n    const createClient = (opts)=>{\n        return (0,_trpc_client__WEBPACK_IMPORTED_MODULE_2__.createTRPCClient)(opts);\n    };\n    const TRPCProvider = (props)=>{\n        const { abortOnUnmount = false, client, queryClient, ssrContext } = props;\n        const [ssrState, setSSRState] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(props.ssrState ?? false);\n        (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n            // Only updating state to `mounted` if we are using SSR.\n            // This makes it so we don't have an unnecessary re-render when opting out of SSR.\n            setSSRState((state)=>state ? \"mounted\" : false);\n        }, []);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createElement(Context.Provider, {\n            value: {\n                abortOnUnmount,\n                queryClient,\n                client,\n                ssrContext: ssrContext ?? null,\n                ssrState,\n                fetchQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.fetchQuery({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"query\"),\n                        queryFn: ()=>client.query(...getClientArgs(pathAndInput, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                fetchInfiniteQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.fetchInfiniteQuery({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"infinite\"),\n                        queryFn: ({ pageParam })=>{\n                            const [path, input] = pathAndInput;\n                            const actualInput = {\n                                ...input,\n                                cursor: pageParam\n                            };\n                            return client.query(...getClientArgs([\n                                path,\n                                actualInput\n                            ], opts));\n                        }\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                prefetchQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.prefetchQuery({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"query\"),\n                        queryFn: ()=>client.query(...getClientArgs(pathAndInput, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                prefetchInfiniteQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.prefetchInfiniteQuery({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"infinite\"),\n                        queryFn: ({ pageParam })=>{\n                            const [path, input] = pathAndInput;\n                            const actualInput = {\n                                ...input,\n                                cursor: pageParam\n                            };\n                            return client.query(...getClientArgs([\n                                path,\n                                actualInput\n                            ], opts));\n                        }\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                ensureQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.ensureQueryData({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"query\"),\n                        queryFn: ()=>client.query(...getClientArgs(pathAndInput, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                invalidateQueries: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((queryKey, filters, options)=>{\n                    return queryClient.invalidateQueries({\n                        ...filters,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"any\")\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                resetQueries: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, filters, options] = args;\n                    return queryClient.resetQueries({\n                        ...filters,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"any\")\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                refetchQueries: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, filters, options] = args;\n                    return queryClient.refetchQueries({\n                        ...filters,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"any\")\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                cancelQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput)=>{\n                    return queryClient.cancelQueries({\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"any\")\n                    });\n                }, [\n                    queryClient\n                ]),\n                setQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.setQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"query\"), ...rest);\n                }, [\n                    queryClient\n                ]),\n                getQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.getQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"query\"), ...rest);\n                }, [\n                    queryClient\n                ]),\n                setInfiniteQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.setQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"infinite\"), ...rest);\n                }, [\n                    queryClient\n                ]),\n                getInfiniteQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.getQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, \"infinite\"), ...rest);\n                }, [\n                    queryClient\n                ])\n            }\n        }, props.children);\n    };\n    function useContext() {\n        return react__WEBPACK_IMPORTED_MODULE_3__.useContext(Context);\n    }\n    /**\n   * Hack to make sure errors return `status`='error` when doing SSR\n   * @link https://github.com/trpc/trpc/pull/1645\n   */ function useSSRQueryOptionsIfNeeded(pathAndInput, type, opts) {\n        const { queryClient, ssrState } = useContext();\n        return ssrState && ssrState !== \"mounted\" && queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, type))?.state.status === \"error\" ? {\n            retryOnMount: false,\n            ...opts\n        } : opts;\n    }\n    function useQuery$1(pathAndInput, opts) {\n        const context = useContext();\n        if (!context) {\n            throw new Error(\"Unable to retrieve application context. Did you forget to wrap your App inside `withTRPC` HoC?\");\n        }\n        const { abortOnUnmount, client, ssrState, queryClient, prefetchQuery } = context;\n        const defaultOpts = queryClient.getQueryDefaults((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"query\"));\n        if ( true && ssrState === \"prepass\" && opts?.trpc?.ssr !== false && (opts?.enabled ?? defaultOpts?.enabled) !== false && !queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"query\"))) {\n            void prefetchQuery(pathAndInput, opts);\n        }\n        const ssrOpts = useSSRQueryOptionsIfNeeded(pathAndInput, \"query\", {\n            ...defaultOpts,\n            ...opts\n        });\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? config?.abortOnUnmount ?? abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.useQuery)({\n            ...ssrOpts,\n            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"query\"),\n            queryFn: (queryFunctionContext)=>{\n                const actualOpts = {\n                    ...ssrOpts,\n                    trpc: {\n                        ...ssrOpts?.trpc,\n                        ...shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {}\n                    }\n                };\n                return client.query(...getClientArgs(pathAndInput, actualOpts));\n            },\n            context: ReactQueryContext\n        });\n        hook.trpc = useHookResult({\n            path: pathAndInput[0]\n        });\n        return hook;\n    }\n    function useMutation$1(path, opts) {\n        const { client } = useContext();\n        const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.useQueryClient)({\n            context: ReactQueryContext\n        });\n        const actualPath = Array.isArray(path) ? path[0] : path;\n        const defaultOpts = queryClient.getMutationDefaults([\n            actualPath.split(\".\")\n        ]);\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__.useMutation)({\n            ...opts,\n            mutationKey: [\n                actualPath.split(\".\")\n            ],\n            mutationFn: (input)=>{\n                return client.mutation(...getClientArgs([\n                    actualPath,\n                    input\n                ], opts));\n            },\n            context: ReactQueryContext,\n            onSuccess (...args) {\n                const originalFn = ()=>opts?.onSuccess?.(...args) ?? defaultOpts?.onSuccess?.(...args);\n                return mutationSuccessOverride({\n                    originalFn,\n                    queryClient,\n                    meta: opts?.meta ?? defaultOpts?.meta ?? {}\n                });\n            }\n        });\n        hook.trpc = useHookResult({\n            path: actualPath\n        });\n        return hook;\n    }\n    /* istanbul ignore next -- @preserve */ function useSubscription(pathAndInput, opts) {\n        const enabled = opts?.enabled ?? true;\n        const queryKey = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__.hashQueryKey)(pathAndInput);\n        const { client } = useContext();\n        const optsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(opts);\n        optsRef.current = opts;\n        (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n            if (!enabled) {\n                return;\n            }\n            const [path, input] = pathAndInput;\n            let isStopped = false;\n            const subscription = client.subscription(path, input ?? undefined, {\n                onStarted: ()=>{\n                    if (!isStopped) {\n                        optsRef.current.onStarted?.();\n                    }\n                },\n                onData: (data)=>{\n                    if (!isStopped) {\n                        // FIXME this shouldn't be needed as both should be `unknown` in next major\n                        optsRef.current.onData(data);\n                    }\n                },\n                onError: (err)=>{\n                    if (!isStopped) {\n                        optsRef.current.onError?.(err);\n                    }\n                }\n            });\n            return ()=>{\n                isStopped = true;\n                subscription.unsubscribe();\n            };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            queryKey,\n            enabled\n        ]);\n    }\n    function useInfiniteQuery$1(pathAndInput, opts) {\n        const [path, input] = pathAndInput;\n        const { client, ssrState, prefetchInfiniteQuery, queryClient, abortOnUnmount } = useContext();\n        const defaultOpts = queryClient.getQueryDefaults((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"infinite\"));\n        if ( true && ssrState === \"prepass\" && opts?.trpc?.ssr !== false && (opts?.enabled ?? defaultOpts?.enabled) !== false && !queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"infinite\"))) {\n            void prefetchInfiniteQuery(pathAndInput, {\n                ...defaultOpts,\n                ...opts\n            });\n        }\n        const ssrOpts = useSSRQueryOptionsIfNeeded(pathAndInput, \"infinite\", {\n            ...defaultOpts,\n            ...opts\n        });\n        // request option should take priority over global\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.useInfiniteQuery)({\n            ...ssrOpts,\n            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, \"infinite\"),\n            queryFn: (queryFunctionContext)=>{\n                const actualOpts = {\n                    ...ssrOpts,\n                    trpc: {\n                        ...ssrOpts?.trpc,\n                        ...shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {}\n                    }\n                };\n                const actualInput = {\n                    ...input ?? {},\n                    cursor: queryFunctionContext.pageParam ?? opts?.initialCursor\n                };\n                // FIXME as any shouldn't be needed as client should be untyped too\n                return client.query(...getClientArgs([\n                    path,\n                    actualInput\n                ], actualOpts));\n            },\n            context: ReactQueryContext\n        });\n        hook.trpc = useHookResult({\n            path\n        });\n        return hook;\n    }\n    const useQueries$1 = (queriesCallback, context)=>{\n        const { ssrState, queryClient, prefetchQuery, client } = useContext();\n        const proxy = createUseQueriesProxy(client);\n        const queries = queriesCallback(proxy);\n        if ( true && ssrState === \"prepass\") {\n            for (const query of queries){\n                const queryOption = query;\n                if (queryOption.trpc?.ssr !== false && !queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryOption.queryKey, \"query\"))) {\n                    void prefetchQuery(queryOption.queryKey, queryOption);\n                }\n            }\n        }\n        return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueries)({\n            queries: queries.map((query)=>({\n                    ...query,\n                    queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(query.queryKey, \"query\")\n                })),\n            context\n        });\n    };\n    const useDehydratedState = (client, trpcState)=>{\n        const transformed = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{\n            if (!trpcState) {\n                return trpcState;\n            }\n            return client.runtime.transformer.deserialize(trpcState);\n        }, [\n            trpcState,\n            client\n        ]);\n        return transformed;\n    };\n    return {\n        Provider: TRPCProvider,\n        createClient,\n        useContext,\n        useUtils: useContext,\n        useQuery: useQuery$1,\n        useQueries: useQueries$1,\n        useMutation: useMutation$1,\n        useSubscription,\n        useDehydratedState,\n        useInfiniteQuery: useInfiniteQuery$1\n    };\n}\n/**\n * Create strongly typed react hooks\n * @internal\n * @deprecated\n */ function createHooksInternal(config) {\n    return createRootHooks(config);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/react-query/dist/createHooksInternal-bdff7171.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getArrayQueryKey)\n/* harmony export */ });\n/**\n * To allow easy interactions with groups of related queries, such as\n * invalidating all queries of a router, we use an array as the path when\n * storing in tanstack query. This function converts from the `.` separated\n * path passed around internally by both the legacy and proxy implementation.\n * https://github.com/trpc/trpc/issues/2611\n **/ function getArrayQueryKey(queryKey, type) {\n    const queryKeyArrayed = Array.isArray(queryKey) ? queryKey : [\n        queryKey\n    ];\n    const [path, input] = queryKeyArrayed;\n    const arrayPath = typeof path !== \"string\" || path === \"\" ? [] : path.split(\".\");\n    // Construct a query key that is easy to destructure and flexible for\n    // partial selecting etc.\n    // https://github.com/trpc/trpc/issues/3128\n    if (!input && (!type || type === \"any\")) // we don't want nested array if path is empty, i.e. `[]` instead of `[[]]`\n    return arrayPath.length ? [\n        arrayPath\n    ] : [];\n    return [\n        arrayPath,\n        {\n            ...typeof input !== \"undefined\" && {\n                input: input\n            },\n            ...type && type !== \"any\" && {\n                type: type\n            }\n        }\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvcmVhY3QtcXVlcnkvZGlzdC9nZXRBcnJheVF1ZXJ5S2V5LTg2MTM0ZjhiLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztFQU1FLEdBQUcsU0FBU0EsaUJBQWlCQyxRQUFRLEVBQUVDLElBQUk7SUFDekMsTUFBTUMsa0JBQWtCQyxNQUFNQyxPQUFPLENBQUNKLFlBQVlBLFdBQVc7UUFDekRBO0tBQ0g7SUFDRCxNQUFNLENBQUNLLE1BQU1DLE1BQU0sR0FBR0o7SUFDdEIsTUFBTUssWUFBWSxPQUFPRixTQUFTLFlBQVlBLFNBQVMsS0FBSyxFQUFFLEdBQUdBLEtBQUtHLEtBQUssQ0FBQztJQUM1RSxxRUFBcUU7SUFDckUseUJBQXlCO0lBQ3pCLDJDQUEyQztJQUMzQyxJQUFJLENBQUNGLFNBQVUsRUFBQ0wsUUFBUUEsU0FBUyxLQUFJLEdBQ3JDLDJFQUEyRTtJQUMzRSxPQUFPTSxVQUFVRSxNQUFNLEdBQUc7UUFDdEJGO0tBQ0gsR0FBRyxFQUFFO0lBQ04sT0FBTztRQUNIQTtRQUNBO1lBQ0ksR0FBRyxPQUFPRCxVQUFVLGVBQWU7Z0JBQy9CQSxPQUFPQTtZQUNYLENBQUM7WUFDRCxHQUFHTCxRQUFRQSxTQUFTLFNBQVM7Z0JBQ3pCQSxNQUFNQTtZQUNWLENBQUM7UUFDTDtLQUNIO0FBQ0w7QUFFaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B0cnBjL3JlYWN0LXF1ZXJ5L2Rpc3QvZ2V0QXJyYXlRdWVyeUtleS04NjEzNGY4Yi5tanM/YzE1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRvIGFsbG93IGVhc3kgaW50ZXJhY3Rpb25zIHdpdGggZ3JvdXBzIG9mIHJlbGF0ZWQgcXVlcmllcywgc3VjaCBhc1xuICogaW52YWxpZGF0aW5nIGFsbCBxdWVyaWVzIG9mIGEgcm91dGVyLCB3ZSB1c2UgYW4gYXJyYXkgYXMgdGhlIHBhdGggd2hlblxuICogc3RvcmluZyBpbiB0YW5zdGFjayBxdWVyeS4gVGhpcyBmdW5jdGlvbiBjb252ZXJ0cyBmcm9tIHRoZSBgLmAgc2VwYXJhdGVkXG4gKiBwYXRoIHBhc3NlZCBhcm91bmQgaW50ZXJuYWxseSBieSBib3RoIHRoZSBsZWdhY3kgYW5kIHByb3h5IGltcGxlbWVudGF0aW9uLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3RycGMvdHJwYy9pc3N1ZXMvMjYxMVxuICoqLyBmdW5jdGlvbiBnZXRBcnJheVF1ZXJ5S2V5KHF1ZXJ5S2V5LCB0eXBlKSB7XG4gICAgY29uc3QgcXVlcnlLZXlBcnJheWVkID0gQXJyYXkuaXNBcnJheShxdWVyeUtleSkgPyBxdWVyeUtleSA6IFtcbiAgICAgICAgcXVlcnlLZXlcbiAgICBdO1xuICAgIGNvbnN0IFtwYXRoLCBpbnB1dF0gPSBxdWVyeUtleUFycmF5ZWQ7XG4gICAgY29uc3QgYXJyYXlQYXRoID0gdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnIHx8IHBhdGggPT09ICcnID8gW10gOiBwYXRoLnNwbGl0KCcuJyk7XG4gICAgLy8gQ29uc3RydWN0IGEgcXVlcnkga2V5IHRoYXQgaXMgZWFzeSB0byBkZXN0cnVjdHVyZSBhbmQgZmxleGlibGUgZm9yXG4gICAgLy8gcGFydGlhbCBzZWxlY3RpbmcgZXRjLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90cnBjL3RycGMvaXNzdWVzLzMxMjhcbiAgICBpZiAoIWlucHV0ICYmICghdHlwZSB8fCB0eXBlID09PSAnYW55JykpIC8vIGZvciBgdXRpbHMuaW52YWxpZGF0ZSgpYCB0byBtYXRjaCBhbGwgcXVlcmllcyAoaW5jbHVkaW5nIHZhbmlsbGEgcmVhY3QtcXVlcnkpXG4gICAgLy8gd2UgZG9uJ3Qgd2FudCBuZXN0ZWQgYXJyYXkgaWYgcGF0aCBpcyBlbXB0eSwgaS5lLiBgW11gIGluc3RlYWQgb2YgYFtbXV1gXG4gICAgcmV0dXJuIGFycmF5UGF0aC5sZW5ndGggPyBbXG4gICAgICAgIGFycmF5UGF0aFxuICAgIF0gOiBbXTtcbiAgICByZXR1cm4gW1xuICAgICAgICBhcnJheVBhdGgsXG4gICAgICAgIHtcbiAgICAgICAgICAgIC4uLnR5cGVvZiBpbnB1dCAhPT0gJ3VuZGVmaW5lZCcgJiYge1xuICAgICAgICAgICAgICAgIGlucHV0OiBpbnB1dFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC4uLnR5cGUgJiYgdHlwZSAhPT0gJ2FueScgJiYge1xuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF07XG59XG5cbmV4cG9ydCB7IGdldEFycmF5UXVlcnlLZXkgYXMgZyB9O1xuIl0sIm5hbWVzIjpbImdldEFycmF5UXVlcnlLZXkiLCJxdWVyeUtleSIsInR5cGUiLCJxdWVyeUtleUFycmF5ZWQiLCJBcnJheSIsImlzQXJyYXkiLCJwYXRoIiwiaW5wdXQiLCJhcnJheVBhdGgiLCJzcGxpdCIsImxlbmd0aCIsImciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/react-query/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@trpc/react-query/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.TRPCClientError),\n/* harmony export */   TRPCUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.clientCallTypeToProcedureType),\n/* harmony export */   createReactQueryHooks: () => (/* binding */ createReactQueryHooks),\n/* harmony export */   createTRPCClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCProxyClient),\n/* harmony export */   createTRPCReact: () => (/* binding */ createTRPCReact),\n/* harmony export */   createTRPCUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createWSClient),\n/* harmony export */   experimental_formDataLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.experimental_formDataLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.getFetch),\n/* harmony export */   getQueryKey: () => (/* reexport safe */ _createHooksInternal_bdff7171_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   getUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpBatchLink),\n/* harmony export */   httpLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpLink),\n/* harmony export */   httpLinkFactory: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpLinkFactory),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.loggerLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.splitLink),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.unstable_httpBatchStreamLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/./node_modules/@trpc/client/dist/index.mjs\");\n/* harmony import */ var _createHooksInternal_bdff7171_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createHooksInternal-bdff7171.mjs */ \"(ssr)/./node_modules/@trpc/react-query/dist/createHooksInternal-bdff7171.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/./node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getArrayQueryKey-86134f8b.mjs */ \"(ssr)/./node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs\");\n\n\n\n\n\n\n\n/**\n * @internal\n */ function createHooksInternalProxy(trpc) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_2__.createFlatProxy)((key)=>{\n        if (key === \"useContext\" || key === \"useUtils\") {\n            return ()=>{\n                const context = trpc.useUtils();\n                // create a stable reference of the utils context\n                return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{\n                    return (0,_createHooksInternal_bdff7171_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(context);\n                }, [\n                    context\n                ]);\n            };\n        }\n        if (trpc.hasOwnProperty(key)) {\n            return trpc[key];\n        }\n        return (0,_createHooksInternal_bdff7171_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(key, trpc);\n    });\n}\nfunction createTRPCReact(opts) {\n    const hooks = (0,_createHooksInternal_bdff7171_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(opts);\n    const proxy = createHooksInternalProxy(hooks);\n    return proxy;\n}\n// interop:\n/**\n * @deprecated use `createTRPCReact` instead\n */ function createReactQueryHooks(opts) {\n    const trpc = (0,_createHooksInternal_bdff7171_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(opts);\n    const proxy = createHooksInternalProxy(trpc);\n    return {\n        ...trpc,\n        proxy\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvcmVhY3QtcXVlcnkvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkI7QUFDbUg7QUFDMUU7QUFDaEI7QUFDdEI7QUFDRDtBQUNVO0FBRXpDOztDQUVDLEdBQUcsU0FBU1UseUJBQXlCQyxJQUFJO0lBQ3RDLE9BQU9ILG9FQUFlQSxDQUFDLENBQUNJO1FBQ3BCLElBQUlBLFFBQVEsZ0JBQWdCQSxRQUFRLFlBQVk7WUFDNUMsT0FBTztnQkFDSCxNQUFNQyxVQUFVRixLQUFLRyxRQUFRO2dCQUM3QixpREFBaUQ7Z0JBQ2pELE9BQU9MLDhDQUFPQSxDQUFDO29CQUNYLE9BQU9OLG9FQUEwQkEsQ0FBQ1U7Z0JBQ3RDLEdBQUc7b0JBQ0NBO2lCQUNIO1lBQ0w7UUFDSjtRQUNBLElBQUlGLEtBQUtJLGNBQWMsQ0FBQ0gsTUFBTTtZQUMxQixPQUFPRCxJQUFJLENBQUNDLElBQUk7UUFDcEI7UUFDQSxPQUFPUCxvRUFBMEJBLENBQUNPLEtBQUtEO0lBQzNDO0FBQ0o7QUFDQSxTQUFTSyxnQkFBZ0JDLElBQUk7SUFDekIsTUFBTUMsUUFBUWpCLG9FQUFtQkEsQ0FBQ2dCO0lBQ2xDLE1BQU1FLFFBQVFULHlCQUF5QlE7SUFDdkMsT0FBT0M7QUFDWDtBQUVBLFdBQVc7QUFDWDs7Q0FFQyxHQUFHLFNBQVNDLHNCQUFzQkgsSUFBSTtJQUNuQyxNQUFNTixPQUFPVixvRUFBbUJBLENBQUNnQjtJQUNqQyxNQUFNRSxRQUFRVCx5QkFBeUJDO0lBQ3ZDLE9BQU87UUFDSCxHQUFHQSxJQUFJO1FBQ1BRO0lBQ0o7QUFDSjtBQUVrRCIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHRycGMvcmVhY3QtcXVlcnkvZGlzdC9pbmRleC5tanM/YjAxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICdAdHJwYy9jbGllbnQnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVIb29rc0ludGVybmFsLCBhIGFzIGNyZWF0ZVJlYWN0UXVlcnlVdGlsc1Byb3h5LCBiIGFzIGNyZWF0ZVJlYWN0UHJveHlEZWNvcmF0aW9uIH0gZnJvbSAnLi9jcmVhdGVIb29rc0ludGVybmFsLWJkZmY3MTcxLm1qcyc7XG5leHBvcnQgeyBnIGFzIGdldFF1ZXJ5S2V5IH0gZnJvbSAnLi9jcmVhdGVIb29rc0ludGVybmFsLWJkZmY3MTcxLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVGbGF0UHJveHkgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvc2hhcmVkJztcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XG5pbXBvcnQgJy4vZ2V0QXJyYXlRdWVyeUtleS04NjEzNGY4Yi5tanMnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGNyZWF0ZUhvb2tzSW50ZXJuYWxQcm94eSh0cnBjKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZsYXRQcm94eSgoa2V5KT0+e1xuICAgICAgICBpZiAoa2V5ID09PSAndXNlQ29udGV4dCcgfHwga2V5ID09PSAndXNlVXRpbHMnKSB7XG4gICAgICAgICAgICByZXR1cm4gKCk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdHJwYy51c2VVdGlscygpO1xuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIHN0YWJsZSByZWZlcmVuY2Ugb2YgdGhlIHV0aWxzIGNvbnRleHRcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlTWVtbygoKT0+e1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlUmVhY3RRdWVyeVV0aWxzUHJveHkoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cnBjLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnBjW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlYWN0UHJveHlEZWNvcmF0aW9uKGtleSwgdHJwYyk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVUUlBDUmVhY3Qob3B0cykge1xuICAgIGNvbnN0IGhvb2tzID0gY3JlYXRlSG9va3NJbnRlcm5hbChvcHRzKTtcbiAgICBjb25zdCBwcm94eSA9IGNyZWF0ZUhvb2tzSW50ZXJuYWxQcm94eShob29rcyk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuXG4vLyBpbnRlcm9wOlxuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2UgYGNyZWF0ZVRSUENSZWFjdGAgaW5zdGVhZFxuICovIGZ1bmN0aW9uIGNyZWF0ZVJlYWN0UXVlcnlIb29rcyhvcHRzKSB7XG4gICAgY29uc3QgdHJwYyA9IGNyZWF0ZUhvb2tzSW50ZXJuYWwob3B0cyk7XG4gICAgY29uc3QgcHJveHkgPSBjcmVhdGVIb29rc0ludGVybmFsUHJveHkodHJwYyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4udHJwYyxcbiAgICAgICAgcHJveHlcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjcmVhdGVSZWFjdFF1ZXJ5SG9va3MsIGNyZWF0ZVRSUENSZWFjdCB9O1xuIl0sIm5hbWVzIjpbImMiLCJjcmVhdGVIb29rc0ludGVybmFsIiwiYSIsImNyZWF0ZVJlYWN0UXVlcnlVdGlsc1Byb3h5IiwiYiIsImNyZWF0ZVJlYWN0UHJveHlEZWNvcmF0aW9uIiwiZyIsImdldFF1ZXJ5S2V5IiwiY3JlYXRlRmxhdFByb3h5IiwidXNlTWVtbyIsImNyZWF0ZUhvb2tzSW50ZXJuYWxQcm94eSIsInRycGMiLCJrZXkiLCJjb250ZXh0IiwidXNlVXRpbHMiLCJoYXNPd25Qcm9wZXJ0eSIsImNyZWF0ZVRSUENSZWFjdCIsIm9wdHMiLCJob29rcyIsInByb3h5IiwiY3JlYXRlUmVhY3RRdWVyeUhvb2tzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/react-query/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@trpc/server/dist/codes-c924c3db.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_KEY),\n/* harmony export */   a: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   i: () => (/* binding */ invert)\n/* harmony export */ });\n/**\n * @internal\n */ function invert(obj) {\n    const newObj = Object.create(null);\n    for(const key in obj){\n        const v = obj[key];\n        newObj[v] = key;\n    }\n    return newObj;\n}\n// reference: https://www.jsonrpc.org/specification\n/**\n * JSON-RPC 2.0 Error codes\n *\n * `-32000` to `-32099` are reserved for implementation-defined server-errors.\n * For tRPC we're copying the last digits of HTTP 4XX errors.\n */ const TRPC_ERROR_CODES_BY_KEY = {\n    /**\n   * Invalid JSON was received by the server.\n   * An error occurred on the server while parsing the JSON text.\n   */ PARSE_ERROR: -32700,\n    /**\n   * The JSON sent is not a valid Request object.\n   */ BAD_REQUEST: -32600,\n    // Internal JSON-RPC error\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    // Implementation specific errors\n    UNAUTHORIZED: -32001,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29kZXMtYzkyNGMzZGIubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBQUcsU0FBU0EsT0FBT0MsR0FBRztJQUNuQixNQUFNQyxTQUFTQyxPQUFPQyxNQUFNLENBQUM7SUFDN0IsSUFBSSxNQUFNQyxPQUFPSixJQUFJO1FBQ2pCLE1BQU1LLElBQUlMLEdBQUcsQ0FBQ0ksSUFBSTtRQUNsQkgsTUFBTSxDQUFDSSxFQUFFLEdBQUdEO0lBQ2hCO0lBQ0EsT0FBT0g7QUFDWDtBQUVBLG1EQUFtRDtBQUNuRDs7Ozs7Q0FLQyxHQUFHLE1BQU1LLDBCQUEwQjtJQUNoQzs7O0dBR0QsR0FBR0MsYUFBYSxDQUFDO0lBQ2hCOztHQUVELEdBQUdDLGFBQWEsQ0FBQztJQUNoQiwwQkFBMEI7SUFDMUJDLHVCQUF1QixDQUFDO0lBQ3hCQyxpQkFBaUIsQ0FBQztJQUNsQixpQ0FBaUM7SUFDakNDLGNBQWMsQ0FBQztJQUNmQyxXQUFXLENBQUM7SUFDWkMsV0FBVyxDQUFDO0lBQ1pDLHNCQUFzQixDQUFDO0lBQ3ZCQyxTQUFTLENBQUM7SUFDVkMsVUFBVSxDQUFDO0lBQ1hDLHFCQUFxQixDQUFDO0lBQ3RCQyxtQkFBbUIsQ0FBQztJQUNwQkMsdUJBQXVCLENBQUM7SUFDeEJDLG1CQUFtQixDQUFDO0lBQ3BCQyx1QkFBdUIsQ0FBQztBQUM1QjtBQUNBLE1BQU1DLDZCQUE2QnZCLE9BQU9PO0FBRTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9jb2Rlcy1jOTI0YzNkYi5tanM/MzAyMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGludmVydChvYmopIHtcbiAgICBjb25zdCBuZXdPYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvcihjb25zdCBrZXkgaW4gb2JqKXtcbiAgICAgICAgY29uc3QgdiA9IG9ialtrZXldO1xuICAgICAgICBuZXdPYmpbdl0gPSBrZXk7XG4gICAgfVxuICAgIHJldHVybiBuZXdPYmo7XG59XG5cbi8vIHJlZmVyZW5jZTogaHR0cHM6Ly93d3cuanNvbnJwYy5vcmcvc3BlY2lmaWNhdGlvblxuLyoqXG4gKiBKU09OLVJQQyAyLjAgRXJyb3IgY29kZXNcbiAqXG4gKiBgLTMyMDAwYCB0byBgLTMyMDk5YCBhcmUgcmVzZXJ2ZWQgZm9yIGltcGxlbWVudGF0aW9uLWRlZmluZWQgc2VydmVyLWVycm9ycy5cbiAqIEZvciB0UlBDIHdlJ3JlIGNvcHlpbmcgdGhlIGxhc3QgZGlnaXRzIG9mIEhUVFAgNFhYIGVycm9ycy5cbiAqLyBjb25zdCBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSA9IHtcbiAgICAvKipcbiAgICogSW52YWxpZCBKU09OIHdhcyByZWNlaXZlZCBieSB0aGUgc2VydmVyLlxuICAgKiBBbiBlcnJvciBvY2N1cnJlZCBvbiB0aGUgc2VydmVyIHdoaWxlIHBhcnNpbmcgdGhlIEpTT04gdGV4dC5cbiAgICovIFBBUlNFX0VSUk9SOiAtMzI3MDAsXG4gICAgLyoqXG4gICAqIFRoZSBKU09OIHNlbnQgaXMgbm90IGEgdmFsaWQgUmVxdWVzdCBvYmplY3QuXG4gICAqLyBCQURfUkVRVUVTVDogLTMyNjAwLFxuICAgIC8vIEludGVybmFsIEpTT04tUlBDIGVycm9yXG4gICAgSU5URVJOQUxfU0VSVkVSX0VSUk9SOiAtMzI2MDMsXG4gICAgTk9UX0lNUExFTUVOVEVEOiAtMzI2MDMsXG4gICAgLy8gSW1wbGVtZW50YXRpb24gc3BlY2lmaWMgZXJyb3JzXG4gICAgVU5BVVRIT1JJWkVEOiAtMzIwMDEsXG4gICAgRk9SQklEREVOOiAtMzIwMDMsXG4gICAgTk9UX0ZPVU5EOiAtMzIwMDQsXG4gICAgTUVUSE9EX05PVF9TVVBQT1JURUQ6IC0zMjAwNSxcbiAgICBUSU1FT1VUOiAtMzIwMDgsXG4gICAgQ09ORkxJQ1Q6IC0zMjAwOSxcbiAgICBQUkVDT05ESVRJT05fRkFJTEVEOiAtMzIwMTIsXG4gICAgUEFZTE9BRF9UT09fTEFSR0U6IC0zMjAxMyxcbiAgICBVTlBST0NFU1NBQkxFX0NPTlRFTlQ6IC0zMjAyMixcbiAgICBUT09fTUFOWV9SRVFVRVNUUzogLTMyMDI5LFxuICAgIENMSUVOVF9DTE9TRURfUkVRVUVTVDogLTMyMDk5XG59O1xuY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgPSBpbnZlcnQoVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkpO1xuXG5leHBvcnQgeyBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSBhcyBULCBUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiBhcyBhLCBpbnZlcnQgYXMgaSB9O1xuIl0sIm5hbWVzIjpbImludmVydCIsIm9iaiIsIm5ld09iaiIsIk9iamVjdCIsImNyZWF0ZSIsImtleSIsInYiLCJUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSIsIlBBUlNFX0VSUk9SIiwiQkFEX1JFUVVFU1QiLCJJTlRFUk5BTF9TRVJWRVJfRVJST1IiLCJOT1RfSU1QTEVNRU5URUQiLCJVTkFVVEhPUklaRUQiLCJGT1JCSURERU4iLCJOT1RfRk9VTkQiLCJNRVRIT0RfTk9UX1NVUFBPUlRFRCIsIlRJTUVPVVQiLCJDT05GTElDVCIsIlBSRUNPTkRJVElPTl9GQUlMRUQiLCJQQVlMT0FEX1RPT19MQVJHRSIsIlVOUFJPQ0VTU0FCTEVfQ09OVEVOVCIsIlRPT19NQU5ZX1JFUVVFU1RTIiwiQ0xJRU5UX0NMT1NFRF9SRVFVRVNUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIiLCJUIiwiYSIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/server/dist/index-f91d720c.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@trpc/server/dist/index-f91d720c.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   a: () => (/* binding */ createRecursiveProxy),\n/* harmony export */   b: () => (/* binding */ getHTTPStatusCode),\n/* harmony export */   c: () => (/* binding */ createFlatProxy),\n/* harmony export */   g: () => (/* binding */ getHTTPStatusCodeFromError)\n/* harmony export */ });\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\nconst TRPC_ERROR_CODES_BY_NUMBER = (0,_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.T);\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if (\"error\" in res) {\n            const data = res.error.data;\n            if (typeof data.httpStatus === \"number\") {\n                return data.httpStatus;\n            }\n            const code = TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) {\n        return 207;\n    }\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\nconst noop = ()=>{\n// noop\n};\nfunction createInnerProxy(callback, path) {\n    const proxy = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== \"string\" || key === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ]);\n        },\n        apply (_1, _2, args) {\n            const isApply = path[path.length - 1] === \"apply\";\n            return callback({\n                args: isApply ? args.length >= 2 ? args[1] : [] : args,\n                path: isApply ? path.slice(0, -1) : path\n            });\n        }\n    });\n    return proxy;\n}\n/**\n * Creates a proxy that calls the callback with the path and arguments\n *\n * @internal\n */ const createRecursiveProxy = (callback)=>createInnerProxy(callback, []);\n/**\n * Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n *\n * @internal\n */ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (typeof name !== \"string\" || name === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return callback(name);\n        }\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvaW5kZXgtZjkxZDcyMGMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpRjtBQUVqRixNQUFNSSw2QkFBNkJILHNEQUFNQSxDQUFDRSxrREFBdUJBO0FBQ2pFLE1BQU1FLHdCQUF3QjtJQUMxQkMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLGNBQWM7SUFDZEMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLHNCQUFzQjtJQUN0QkMsU0FBUztJQUNUQyxVQUFVO0lBQ1ZDLHFCQUFxQjtJQUNyQkMsbUJBQW1CO0lBQ25CQyx1QkFBdUI7SUFDdkJDLG1CQUFtQjtJQUNuQkMsdUJBQXVCO0lBQ3ZCQyx1QkFBdUI7SUFDdkJDLGlCQUFpQjtBQUNyQjtBQUNBLFNBQVNDLHFCQUFxQkMsSUFBSTtJQUM5QixPQUFPakIscUJBQXFCLENBQUNpQixLQUFLLElBQUk7QUFDMUM7QUFDQSxTQUFTQyxrQkFBa0JDLElBQUk7SUFDM0IsTUFBTUMsTUFBTUMsTUFBTUMsT0FBTyxDQUFDSCxRQUFRQSxPQUFPO1FBQ3JDQTtLQUNIO0lBQ0QsTUFBTUksZUFBZSxJQUFJQyxJQUFJSixJQUFJSyxHQUFHLENBQUMsQ0FBQ0M7UUFDbEMsSUFBSSxXQUFXQSxLQUFLO1lBQ2hCLE1BQU1DLE9BQU9ELElBQUlFLEtBQUssQ0FBQ0QsSUFBSTtZQUMzQixJQUFJLE9BQU9BLEtBQUtFLFVBQVUsS0FBSyxVQUFVO2dCQUNyQyxPQUFPRixLQUFLRSxVQUFVO1lBQzFCO1lBQ0EsTUFBTVosT0FBT2xCLDBCQUEwQixDQUFDMkIsSUFBSUUsS0FBSyxDQUFDWCxJQUFJLENBQUM7WUFDdkQsT0FBT0QscUJBQXFCQztRQUNoQztRQUNBLE9BQU87SUFDWDtJQUNBLElBQUlNLGFBQWFPLElBQUksS0FBSyxHQUFHO1FBQ3pCLE9BQU87SUFDWDtJQUNBLE1BQU1ELGFBQWFOLGFBQWFRLE1BQU0sR0FBR0MsSUFBSSxHQUFHQyxLQUFLO0lBQ3JELE9BQU9KO0FBQ1g7QUFDQSxTQUFTSywyQkFBMkJOLEtBQUs7SUFDckMsT0FBT1oscUJBQXFCWSxNQUFNWCxJQUFJO0FBQzFDO0FBRUEsTUFBTWtCLE9BQU87QUFDYixPQUFPO0FBQ1A7QUFDQSxTQUFTQyxpQkFBaUJDLFFBQVEsRUFBRUMsSUFBSTtJQUNwQyxNQUFNQyxRQUFRLElBQUlDLE1BQU1MLE1BQU07UUFDMUJNLEtBQUtDLElBQUksRUFBRUMsR0FBRztZQUNWLElBQUksT0FBT0EsUUFBUSxZQUFZQSxRQUFRLFFBQVE7Z0JBQzNDLHdEQUF3RDtnQkFDeEQsd0RBQXdEO2dCQUN4RCxPQUFPQztZQUNYO1lBQ0EsT0FBT1IsaUJBQWlCQyxVQUFVO21CQUMzQkM7Z0JBQ0hLO2FBQ0g7UUFDTDtRQUNBRSxPQUFPQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsSUFBSTtZQUNmLE1BQU1DLFVBQVVYLElBQUksQ0FBQ0EsS0FBS1ksTUFBTSxHQUFHLEVBQUUsS0FBSztZQUMxQyxPQUFPYixTQUFTO2dCQUNaVyxNQUFNQyxVQUFVRCxLQUFLRSxNQUFNLElBQUksSUFBSUYsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUdBO2dCQUNsRFYsTUFBTVcsVUFBVVgsS0FBS2EsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLYjtZQUN4QztRQUNKO0lBQ0o7SUFDQSxPQUFPQztBQUNYO0FBQ0E7Ozs7Q0FJQyxHQUFHLE1BQU1hLHVCQUF1QixDQUFDZixXQUFXRCxpQkFBaUJDLFVBQVUsRUFBRTtBQUMxRTs7OztDQUlDLEdBQUcsTUFBTWdCLGtCQUFrQixDQUFDaEI7SUFDekIsT0FBTyxJQUFJRyxNQUFNTCxNQUFNO1FBQ25CTSxLQUFLQyxJQUFJLEVBQUVZLElBQUk7WUFDWCxJQUFJLE9BQU9BLFNBQVMsWUFBWUEsU0FBUyxRQUFRO2dCQUM3Qyx3REFBd0Q7Z0JBQ3hELHdEQUF3RDtnQkFDeEQsT0FBT1Y7WUFDWDtZQUNBLE9BQU9QLFNBQVNpQjtRQUNwQjtJQUNKO0FBQ0o7QUFFcUoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2luZGV4LWY5MWQ3MjBjLm1qcz8zNTBlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGkgYXMgaW52ZXJ0LCBUIGFzIFRSUENfRVJST1JfQ09ERVNfQllfS0VZIH0gZnJvbSAnLi9jb2Rlcy1jOTI0YzNkYi5tanMnO1xuXG5jb25zdCBUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiA9IGludmVydChUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSk7XG5jb25zdCBKU09OUlBDMl9UT19IVFRQX0NPREUgPSB7XG4gICAgUEFSU0VfRVJST1I6IDQwMCxcbiAgICBCQURfUkVRVUVTVDogNDAwLFxuICAgIFVOQVVUSE9SSVpFRDogNDAxLFxuICAgIE5PVF9GT1VORDogNDA0LFxuICAgIEZPUkJJRERFTjogNDAzLFxuICAgIE1FVEhPRF9OT1RfU1VQUE9SVEVEOiA0MDUsXG4gICAgVElNRU9VVDogNDA4LFxuICAgIENPTkZMSUNUOiA0MDksXG4gICAgUFJFQ09ORElUSU9OX0ZBSUxFRDogNDEyLFxuICAgIFBBWUxPQURfVE9PX0xBUkdFOiA0MTMsXG4gICAgVU5QUk9DRVNTQUJMRV9DT05URU5UOiA0MjIsXG4gICAgVE9PX01BTllfUkVRVUVTVFM6IDQyOSxcbiAgICBDTElFTlRfQ0xPU0VEX1JFUVVFU1Q6IDQ5OSxcbiAgICBJTlRFUk5BTF9TRVJWRVJfRVJST1I6IDUwMCxcbiAgICBOT1RfSU1QTEVNRU5URUQ6IDUwMVxufTtcbmZ1bmN0aW9uIGdldFN0YXR1c0NvZGVGcm9tS2V5KGNvZGUpIHtcbiAgICByZXR1cm4gSlNPTlJQQzJfVE9fSFRUUF9DT0RFW2NvZGVdID8/IDUwMDtcbn1cbmZ1bmN0aW9uIGdldEhUVFBTdGF0dXNDb2RlKGpzb24pIHtcbiAgICBjb25zdCBhcnIgPSBBcnJheS5pc0FycmF5KGpzb24pID8ganNvbiA6IFtcbiAgICAgICAganNvblxuICAgIF07XG4gICAgY29uc3QgaHR0cFN0YXR1c2VzID0gbmV3IFNldChhcnIubWFwKChyZXMpPT57XG4gICAgICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlcy5lcnJvci5kYXRhO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhLmh0dHBTdGF0dXMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuaHR0cFN0YXR1cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUltyZXMuZXJyb3IuY29kZV07XG4gICAgICAgICAgICByZXR1cm4gZ2V0U3RhdHVzQ29kZUZyb21LZXkoY29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDIwMDtcbiAgICB9KSk7XG4gICAgaWYgKGh0dHBTdGF0dXNlcy5zaXplICE9PSAxKSB7XG4gICAgICAgIHJldHVybiAyMDc7XG4gICAgfVxuICAgIGNvbnN0IGh0dHBTdGF0dXMgPSBodHRwU3RhdHVzZXMudmFsdWVzKCkubmV4dCgpLnZhbHVlO1xuICAgIHJldHVybiBodHRwU3RhdHVzO1xufVxuZnVuY3Rpb24gZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gZ2V0U3RhdHVzQ29kZUZyb21LZXkoZXJyb3IuY29kZSk7XG59XG5cbmNvbnN0IG5vb3AgPSAoKT0+e1xuLy8gbm9vcFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUlubmVyUHJveHkoY2FsbGJhY2ssIHBhdGgpIHtcbiAgICBjb25zdCBwcm94eSA9IG5ldyBQcm94eShub29wLCB7XG4gICAgICAgIGdldCAoX29iaiwga2V5KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycgfHwga2V5ID09PSAndGhlbicpIHtcbiAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIGlmIHRoZSBwcm94eSBpcyBhY2NpZGVudGFsbHkgdHJlYXRlZFxuICAgICAgICAgICAgICAgIC8vIGxpa2UgYSBQcm9taXNlTGlrZSAobGlrZSBpbiBgUHJvbWlzZS5yZXNvbHZlKHByb3h5KWApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBbXG4gICAgICAgICAgICAgICAgLi4ucGF0aCxcbiAgICAgICAgICAgICAgICBrZXlcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9LFxuICAgICAgICBhcHBseSAoXzEsIF8yLCBhcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBpc0FwcGx5ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdID09PSAnYXBwbHknO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICBhcmdzOiBpc0FwcGx5ID8gYXJncy5sZW5ndGggPj0gMiA/IGFyZ3NbMV0gOiBbXSA6IGFyZ3MsXG4gICAgICAgICAgICAgICAgcGF0aDogaXNBcHBseSA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcHJveHk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBwcm94eSB0aGF0IGNhbGxzIHRoZSBjYWxsYmFjayB3aXRoIHRoZSBwYXRoIGFuZCBhcmd1bWVudHNcbiAqXG4gKiBAaW50ZXJuYWxcbiAqLyBjb25zdCBjcmVhdGVSZWN1cnNpdmVQcm94eSA9IChjYWxsYmFjayk9PmNyZWF0ZUlubmVyUHJveHkoY2FsbGJhY2ssIFtdKTtcbi8qKlxuICogVXNlZCBpbiBwbGFjZSBvZiBgbmV3IFByb3h5YCB3aGVyZSBlYWNoIGhhbmRsZXIgd2lsbCBtYXAgMSBsZXZlbCBkZWVwIHRvIGFub3RoZXIgdmFsdWUuXG4gKlxuICogQGludGVybmFsXG4gKi8gY29uc3QgY3JlYXRlRmxhdFByb3h5ID0gKGNhbGxiYWNrKT0+e1xuICAgIHJldHVybiBuZXcgUHJveHkobm9vcCwge1xuICAgICAgICBnZXQgKF9vYmosIG5hbWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgbmFtZSA9PT0gJ3RoZW4nKSB7XG4gICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBpZiB0aGUgcHJveHkgaXMgYWNjaWRlbnRhbGx5IHRyZWF0ZWRcbiAgICAgICAgICAgICAgICAvLyBsaWtlIGEgUHJvbWlzZUxpa2UgKGxpa2UgaW4gYFByb21pc2UucmVzb2x2ZShwcm94eSlgKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobmFtZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSIGFzIFQsIGNyZWF0ZVJlY3Vyc2l2ZVByb3h5IGFzIGEsIGdldEhUVFBTdGF0dXNDb2RlIGFzIGIsIGNyZWF0ZUZsYXRQcm94eSBhcyBjLCBnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvciBhcyBnIH07XG4iXSwibmFtZXMiOlsiaSIsImludmVydCIsIlQiLCJUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSIsIlRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSIiwiSlNPTlJQQzJfVE9fSFRUUF9DT0RFIiwiUEFSU0VfRVJST1IiLCJCQURfUkVRVUVTVCIsIlVOQVVUSE9SSVpFRCIsIk5PVF9GT1VORCIsIkZPUkJJRERFTiIsIk1FVEhPRF9OT1RfU1VQUE9SVEVEIiwiVElNRU9VVCIsIkNPTkZMSUNUIiwiUFJFQ09ORElUSU9OX0ZBSUxFRCIsIlBBWUxPQURfVE9PX0xBUkdFIiwiVU5QUk9DRVNTQUJMRV9DT05URU5UIiwiVE9PX01BTllfUkVRVUVTVFMiLCJDTElFTlRfQ0xPU0VEX1JFUVVFU1QiLCJJTlRFUk5BTF9TRVJWRVJfRVJST1IiLCJOT1RfSU1QTEVNRU5URUQiLCJnZXRTdGF0dXNDb2RlRnJvbUtleSIsImNvZGUiLCJnZXRIVFRQU3RhdHVzQ29kZSIsImpzb24iLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiLCJodHRwU3RhdHVzZXMiLCJTZXQiLCJtYXAiLCJyZXMiLCJkYXRhIiwiZXJyb3IiLCJodHRwU3RhdHVzIiwic2l6ZSIsInZhbHVlcyIsIm5leHQiLCJ2YWx1ZSIsImdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yIiwibm9vcCIsImNyZWF0ZUlubmVyUHJveHkiLCJjYWxsYmFjayIsInBhdGgiLCJwcm94eSIsIlByb3h5IiwiZ2V0IiwiX29iaiIsImtleSIsInVuZGVmaW5lZCIsImFwcGx5IiwiXzEiLCJfMiIsImFyZ3MiLCJpc0FwcGx5IiwibGVuZ3RoIiwic2xpY2UiLCJjcmVhdGVSZWN1cnNpdmVQcm94eSIsImNyZWF0ZUZsYXRQcm94eSIsIm5hbWUiLCJhIiwiYiIsImMiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/server/dist/index-f91d720c.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/server/dist/observable-ade1bad8.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/observable-ade1bad8.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isObservable),\n/* harmony export */   o: () => (/* binding */ observable)\n/* harmony export */ });\nfunction identity(x) {\n    return x;\n}\n/** @internal */ function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn)=>fn(prev), input);\n    };\n}\nfunction isObservable(x) {\n    return typeof x === \"object\" && x !== null && \"subscribe\" in x;\n}\nfunction observable(subscribe) {\n    const self = {\n        subscribe (observer) {\n            let teardownRef = null;\n            let isDone = false;\n            let unsubscribed = false;\n            let teardownImmediately = false;\n            function unsubscribe() {\n                if (teardownRef === null) {\n                    teardownImmediately = true;\n                    return;\n                }\n                if (unsubscribed) {\n                    return;\n                }\n                unsubscribed = true;\n                if (typeof teardownRef === \"function\") {\n                    teardownRef();\n                } else if (teardownRef) {\n                    teardownRef.unsubscribe();\n                }\n            }\n            teardownRef = subscribe({\n                next (value) {\n                    if (isDone) {\n                        return;\n                    }\n                    observer.next?.(value);\n                },\n                error (err) {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.error?.(err);\n                    unsubscribe();\n                },\n                complete () {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.complete?.();\n                    unsubscribe();\n                }\n            });\n            if (teardownImmediately) {\n                unsubscribe();\n            }\n            return {\n                unsubscribe\n            };\n        },\n        pipe (...operations) {\n            return pipeFromArray(operations)(self);\n        }\n    };\n    return self;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3Qvb2JzZXJ2YWJsZS1hZGUxYmFkOC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxTQUFTQyxDQUFDO0lBQ2YsT0FBT0E7QUFDWDtBQUVBLGNBQWMsR0FBRyxTQUFTQyxjQUFjQyxHQUFHO0lBQ3ZDLElBQUlBLElBQUlDLE1BQU0sS0FBSyxHQUFHO1FBQ2xCLE9BQU9KO0lBQ1g7SUFDQSxJQUFJRyxJQUFJQyxNQUFNLEtBQUssR0FBRztRQUNsQixvRUFBb0U7UUFDcEUsT0FBT0QsR0FBRyxDQUFDLEVBQUU7SUFDakI7SUFDQSxPQUFPLFNBQVNFLE1BQU1DLEtBQUs7UUFDdkIsT0FBT0gsSUFBSUksTUFBTSxDQUFDLENBQUNDLE1BQU1DLEtBQUtBLEdBQUdELE9BQU9GO0lBQzVDO0FBQ0o7QUFFQSxTQUFTSSxhQUFhVCxDQUFDO0lBQ25CLE9BQU8sT0FBT0EsTUFBTSxZQUFZQSxNQUFNLFFBQVEsZUFBZUE7QUFDakU7QUFDQSxTQUFTVSxXQUFXQyxTQUFTO0lBQ3pCLE1BQU1DLE9BQU87UUFDVEQsV0FBV0UsUUFBUTtZQUNmLElBQUlDLGNBQWM7WUFDbEIsSUFBSUMsU0FBUztZQUNiLElBQUlDLGVBQWU7WUFDbkIsSUFBSUMsc0JBQXNCO1lBQzFCLFNBQVNDO2dCQUNMLElBQUlKLGdCQUFnQixNQUFNO29CQUN0Qkcsc0JBQXNCO29CQUN0QjtnQkFDSjtnQkFDQSxJQUFJRCxjQUFjO29CQUNkO2dCQUNKO2dCQUNBQSxlQUFlO2dCQUNmLElBQUksT0FBT0YsZ0JBQWdCLFlBQVk7b0JBQ25DQTtnQkFDSixPQUFPLElBQUlBLGFBQWE7b0JBQ3BCQSxZQUFZSSxXQUFXO2dCQUMzQjtZQUNKO1lBQ0FKLGNBQWNILFVBQVU7Z0JBQ3BCUSxNQUFNQyxLQUFLO29CQUNQLElBQUlMLFFBQVE7d0JBQ1I7b0JBQ0o7b0JBQ0FGLFNBQVNNLElBQUksR0FBR0M7Z0JBQ3BCO2dCQUNBQyxPQUFPQyxHQUFHO29CQUNOLElBQUlQLFFBQVE7d0JBQ1I7b0JBQ0o7b0JBQ0FBLFNBQVM7b0JBQ1RGLFNBQVNRLEtBQUssR0FBR0M7b0JBQ2pCSjtnQkFDSjtnQkFDQUs7b0JBQ0ksSUFBSVIsUUFBUTt3QkFDUjtvQkFDSjtvQkFDQUEsU0FBUztvQkFDVEYsU0FBU1UsUUFBUTtvQkFDakJMO2dCQUNKO1lBQ0o7WUFDQSxJQUFJRCxxQkFBcUI7Z0JBQ3JCQztZQUNKO1lBQ0EsT0FBTztnQkFDSEE7WUFDSjtRQUNKO1FBQ0FNLE1BQU0sR0FBR0MsVUFBVTtZQUNmLE9BQU94QixjQUFjd0IsWUFBWWI7UUFDckM7SUFDSjtJQUNBLE9BQU9BO0FBQ1g7QUFFOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L29ic2VydmFibGUtYWRlMWJhZDgubWpzPzk1M2QiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuXG4vKiogQGludGVybmFsICovIGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoKHByZXYsIGZuKT0+Zm4ocHJldiksIGlucHV0KTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBpc09ic2VydmFibGUoeCkge1xuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbCAmJiAnc3Vic2NyaWJlJyBpbiB4O1xufVxuZnVuY3Rpb24gb2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICBjb25zdCBzZWxmID0ge1xuICAgICAgICBzdWJzY3JpYmUgKG9ic2VydmVyKSB7XG4gICAgICAgICAgICBsZXQgdGVhcmRvd25SZWYgPSBudWxsO1xuICAgICAgICAgICAgbGV0IGlzRG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHVuc3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHRlYXJkb3duSW1tZWRpYXRlbHkgPSBmYWxzZTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93blJlZiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bkltbWVkaWF0ZWx5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRlYXJkb3duUmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duUmVmKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZWFyZG93blJlZikge1xuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93blJlZi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlYXJkb3duUmVmID0gc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0ICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dD8uKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlzRG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yPy4oZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlzRG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlPy4oKTtcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0ZWFyZG93bkltbWVkaWF0ZWx5KSB7XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHBpcGUgKC4uLm9wZXJhdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHNlbGYpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc2VsZjtcbn1cblxuZXhwb3J0IHsgaXNPYnNlcnZhYmxlIGFzIGksIG9ic2VydmFibGUgYXMgbyB9O1xuIl0sIm5hbWVzIjpbImlkZW50aXR5IiwieCIsInBpcGVGcm9tQXJyYXkiLCJmbnMiLCJsZW5ndGgiLCJwaXBlZCIsImlucHV0IiwicmVkdWNlIiwicHJldiIsImZuIiwiaXNPYnNlcnZhYmxlIiwib2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsInNlbGYiLCJvYnNlcnZlciIsInRlYXJkb3duUmVmIiwiaXNEb25lIiwidW5zdWJzY3JpYmVkIiwidGVhcmRvd25JbW1lZGlhdGVseSIsInVuc3Vic2NyaWJlIiwibmV4dCIsInZhbHVlIiwiZXJyb3IiLCJlcnIiLCJjb21wbGV0ZSIsInBpcGUiLCJvcGVyYXRpb25zIiwiaSIsIm8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/server/dist/observable-ade1bad8.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/observable/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObservable: () => (/* reexport safe */ _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   observable: () => (/* reexport safe */ _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   observableToPromise: () => (/* binding */ observableToPromise),\n/* harmony export */   share: () => (/* binding */ share),\n/* harmony export */   tap: () => (/* binding */ tap)\n/* harmony export */ });\n/* harmony import */ var _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable-ade1bad8.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/observable-ade1bad8.mjs\");\n\nfunction share(_opts) {\n    return (originalObserver)=>{\n        let refCount = 0;\n        let subscription = null;\n        const observers = [];\n        function startIfNeeded() {\n            if (subscription) {\n                return;\n            }\n            subscription = originalObserver.subscribe({\n                next (value) {\n                    for (const observer of observers){\n                        observer.next?.(value);\n                    }\n                },\n                error (error) {\n                    for (const observer of observers){\n                        observer.error?.(error);\n                    }\n                },\n                complete () {\n                    for (const observer of observers){\n                        observer.complete?.();\n                    }\n                }\n            });\n        }\n        function resetIfNeeded() {\n            // \"resetOnRefCountZero\"\n            if (refCount === 0 && subscription) {\n                const _sub = subscription;\n                subscription = null;\n                _sub.unsubscribe();\n            }\n        }\n        return {\n            subscribe (observer) {\n                refCount++;\n                observers.push(observer);\n                startIfNeeded();\n                return {\n                    unsubscribe () {\n                        refCount--;\n                        resetIfNeeded();\n                        const index = observers.findIndex((v)=>v === observer);\n                        if (index > -1) {\n                            observers.splice(index, 1);\n                        }\n                    }\n                };\n            }\n        };\n    };\n}\nfunction map(project) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer) {\n                let index = 0;\n                const subscription = originalObserver.subscribe({\n                    next (value) {\n                        observer.next?.(project(value, index++));\n                    },\n                    error (error) {\n                        observer.error?.(error);\n                    },\n                    complete () {\n                        observer.complete?.();\n                    }\n                });\n                return subscription;\n            }\n        };\n    };\n}\nfunction tap(observer) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer2) {\n                return originalObserver.subscribe({\n                    next (v) {\n                        observer.next?.(v);\n                        observer2.next?.(v);\n                    },\n                    error (v) {\n                        observer.error?.(v);\n                        observer2.error?.(v);\n                    },\n                    complete () {\n                        observer.complete?.();\n                        observer2.complete?.();\n                    }\n                });\n            }\n        };\n    };\n}\nclass ObservableAbortError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"ObservableAbortError\";\n        Object.setPrototypeOf(this, ObservableAbortError.prototype);\n    }\n}\n/** @internal */ function observableToPromise(observable) {\n    let abort;\n    const promise = new Promise((resolve, reject)=>{\n        let isDone = false;\n        function onDone() {\n            if (isDone) {\n                return;\n            }\n            isDone = true;\n            reject(new ObservableAbortError(\"This operation was aborted.\"));\n            obs$.unsubscribe();\n        }\n        const obs$ = observable.subscribe({\n            next (data) {\n                isDone = true;\n                resolve(data);\n                onDone();\n            },\n            error (data) {\n                isDone = true;\n                reject(data);\n                onDone();\n            },\n            complete () {\n                isDone = true;\n                onDone();\n            }\n        });\n        abort = onDone;\n    });\n    return {\n        promise,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        abort: abort\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/server/dist/shared/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@trpc/server/dist/shared/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFlatProxy: () => (/* reexport safe */ _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createRecursiveProxy: () => (/* reexport safe */ _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   getErrorShape: () => (/* reexport safe */ _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   transformTRPCResponse: () => (/* reexport safe */ _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__.t)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index-f91d720c.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformTRPCResponse-1153b421.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../codes-c924c3db.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3Qvc2hhcmVkL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXdGO0FBQ2U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3NoYXJlZC9pbmRleC5tanM/ZTE2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBjIGFzIGNyZWF0ZUZsYXRQcm94eSwgYSBhcyBjcmVhdGVSZWN1cnNpdmVQcm94eSB9IGZyb20gJy4uL2luZGV4LWY5MWQ3MjBjLm1qcyc7XG5leHBvcnQgeyBnIGFzIGdldEVycm9yU2hhcGUsIHQgYXMgdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlLTExNTNiNDIxLm1qcyc7XG5pbXBvcnQgJy4uL2NvZGVzLWM5MjRjM2RiLm1qcyc7XG4iXSwibmFtZXMiOlsiYyIsImNyZWF0ZUZsYXRQcm94eSIsImEiLCJjcmVhdGVSZWN1cnNpdmVQcm94eSIsImciLCJnZXRFcnJvclNoYXBlIiwidCIsInRyYW5zZm9ybVRSUENSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/server/dist/shared/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getErrorShape),\n/* harmony export */   t: () => (/* binding */ transformTRPCResponse)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n/**\n * @internal\n */ function getErrorShape(opts) {\n    const { path, error, config } = opts;\n    const { code } = opts.error;\n    const shape = {\n        message: error.message,\n        code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__.T[code],\n        data: {\n            code,\n            httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(error)\n        }\n    };\n    if (config.isDev && typeof opts.error.stack === \"string\") {\n        shape.data.stack = opts.error.stack;\n    }\n    if (typeof path === \"string\") {\n        shape.data.path = path;\n    }\n    return config.errorFormatter({\n        ...opts,\n        shape\n    });\n}\nfunction transformTRPCResponseItem(config, item) {\n    if (\"error\" in item) {\n        return {\n            ...item,\n            error: config.transformer.output.serialize(item.error)\n        };\n    }\n    if (\"data\" in item.result) {\n        return {\n            ...item,\n            result: {\n                ...item.result,\n                data: config.transformer.output.serialize(item.result.data)\n            }\n        };\n    }\n    return item;\n}\n/**\n * Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n **/ function transformTRPCResponse(config, itemOrItems) {\n    return Array.isArray(itemOrItems) ? itemOrItems.map((item)=>transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlLTExNTNiNDIxLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVFO0FBQ0g7QUFFcEU7O0NBRUMsR0FBRyxTQUFTSSxjQUFjQyxJQUFJO0lBQzNCLE1BQU0sRUFBRUMsSUFBSSxFQUFHQyxLQUFLLEVBQUdDLE1BQU0sRUFBRyxHQUFHSDtJQUNuQyxNQUFNLEVBQUVJLElBQUksRUFBRyxHQUFHSixLQUFLRSxLQUFLO0lBQzVCLE1BQU1HLFFBQVE7UUFDVkMsU0FBU0osTUFBTUksT0FBTztRQUN0QkYsTUFBTU4sa0RBQXVCLENBQUNNLEtBQUs7UUFDbkNHLE1BQU07WUFDRkg7WUFDQUksWUFBWVosc0RBQTBCQSxDQUFDTTtRQUMzQztJQUNKO0lBQ0EsSUFBSUMsT0FBT00sS0FBSyxJQUFJLE9BQU9ULEtBQUtFLEtBQUssQ0FBQ1EsS0FBSyxLQUFLLFVBQVU7UUFDdERMLE1BQU1FLElBQUksQ0FBQ0csS0FBSyxHQUFHVixLQUFLRSxLQUFLLENBQUNRLEtBQUs7SUFDdkM7SUFDQSxJQUFJLE9BQU9ULFNBQVMsVUFBVTtRQUMxQkksTUFBTUUsSUFBSSxDQUFDTixJQUFJLEdBQUdBO0lBQ3RCO0lBQ0EsT0FBT0UsT0FBT1EsY0FBYyxDQUFDO1FBQ3pCLEdBQUdYLElBQUk7UUFDUEs7SUFDSjtBQUNKO0FBRUEsU0FBU08sMEJBQTBCVCxNQUFNLEVBQUVVLElBQUk7SUFDM0MsSUFBSSxXQUFXQSxNQUFNO1FBQ2pCLE9BQU87WUFDSCxHQUFHQSxJQUFJO1lBQ1BYLE9BQU9DLE9BQU9XLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLENBQUNILEtBQUtYLEtBQUs7UUFDekQ7SUFDSjtJQUNBLElBQUksVUFBVVcsS0FBS0ksTUFBTSxFQUFFO1FBQ3ZCLE9BQU87WUFDSCxHQUFHSixJQUFJO1lBQ1BJLFFBQVE7Z0JBQ0osR0FBR0osS0FBS0ksTUFBTTtnQkFDZFYsTUFBTUosT0FBT1csV0FBVyxDQUFDQyxNQUFNLENBQUNDLFNBQVMsQ0FBQ0gsS0FBS0ksTUFBTSxDQUFDVixJQUFJO1lBQzlEO1FBQ0o7SUFDSjtJQUNBLE9BQU9NO0FBQ1g7QUFDQTs7RUFFRSxHQUFHLFNBQVNLLHNCQUFzQmYsTUFBTSxFQUFFZ0IsV0FBVztJQUNuRCxPQUFPQyxNQUFNQyxPQUFPLENBQUNGLGVBQWVBLFlBQVlHLEdBQUcsQ0FBQyxDQUFDVCxPQUFPRCwwQkFBMEJULFFBQVFVLFNBQVNELDBCQUEwQlQsUUFBUWdCO0FBQzdJO0FBRTBEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC90cmFuc2Zvcm1UUlBDUmVzcG9uc2UtMTE1M2I0MjEubWpzP2YzYjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZyBhcyBnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvciB9IGZyb20gJy4vaW5kZXgtZjkxZDcyMGMubWpzJztcbmltcG9ydCB7IFQgYXMgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgfSBmcm9tICcuL2NvZGVzLWM5MjRjM2RiLm1qcyc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gZ2V0RXJyb3JTaGFwZShvcHRzKSB7XG4gICAgY29uc3QgeyBwYXRoICwgZXJyb3IgLCBjb25maWcgIH0gPSBvcHRzO1xuICAgIGNvbnN0IHsgY29kZSAgfSA9IG9wdHMuZXJyb3I7XG4gICAgY29uc3Qgc2hhcGUgPSB7XG4gICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIGNvZGU6IFRSUENfRVJST1JfQ09ERVNfQllfS0VZW2NvZGVdLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgaHR0cFN0YXR1czogZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IoZXJyb3IpXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmIChjb25maWcuaXNEZXYgJiYgdHlwZW9mIG9wdHMuZXJyb3Iuc3RhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNoYXBlLmRhdGEuc3RhY2sgPSBvcHRzLmVycm9yLnN0YWNrO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNoYXBlLmRhdGEucGF0aCA9IHBhdGg7XG4gICAgfVxuICAgIHJldHVybiBjb25maWcuZXJyb3JGb3JtYXR0ZXIoe1xuICAgICAgICAuLi5vcHRzLFxuICAgICAgICBzaGFwZVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1UUlBDUmVzcG9uc2VJdGVtKGNvbmZpZywgaXRlbSkge1xuICAgIGlmICgnZXJyb3InIGluIGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICBlcnJvcjogY29uZmlnLnRyYW5zZm9ybWVyLm91dHB1dC5zZXJpYWxpemUoaXRlbS5lcnJvcilcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCdkYXRhJyBpbiBpdGVtLnJlc3VsdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgICAgIC4uLml0ZW0ucmVzdWx0LFxuICAgICAgICAgICAgICAgIGRhdGE6IGNvbmZpZy50cmFuc2Zvcm1lci5vdXRwdXQuc2VyaWFsaXplKGl0ZW0ucmVzdWx0LmRhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufVxuLyoqXG4gKiBUYWtlcyBhIHVuc2VyaWFsaXplZCBgVFJQQ1Jlc3BvbnNlYCBhbmQgc2VyaWFsaXplcyBpdCB3aXRoIHRoZSByb3V0ZXIncyB0cmFuc2Zvcm1lcnNcbiAqKi8gZnVuY3Rpb24gdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlKGNvbmZpZywgaXRlbU9ySXRlbXMpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShpdGVtT3JJdGVtcykgPyBpdGVtT3JJdGVtcy5tYXAoKGl0ZW0pPT50cmFuc2Zvcm1UUlBDUmVzcG9uc2VJdGVtKGNvbmZpZywgaXRlbSkpIDogdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW1Pckl0ZW1zKTtcbn1cblxuZXhwb3J0IHsgZ2V0RXJyb3JTaGFwZSBhcyBnLCB0cmFuc2Zvcm1UUlBDUmVzcG9uc2UgYXMgdCB9O1xuIl0sIm5hbWVzIjpbImciLCJnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvciIsIlQiLCJUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSIsImdldEVycm9yU2hhcGUiLCJvcHRzIiwicGF0aCIsImVycm9yIiwiY29uZmlnIiwiY29kZSIsInNoYXBlIiwibWVzc2FnZSIsImRhdGEiLCJodHRwU3RhdHVzIiwiaXNEZXYiLCJzdGFjayIsImVycm9yRm9ybWF0dGVyIiwidHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbSIsIml0ZW0iLCJ0cmFuc2Zvcm1lciIsIm91dHB1dCIsInNlcmlhbGl6ZSIsInJlc3VsdCIsInRyYW5zZm9ybVRSUENSZXNwb25zZSIsIml0ZW1Pckl0ZW1zIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwidCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\n");

/***/ })

};
;